
[
  {
    "title": "Magical Mitosis",
    "url": "https://www.youtube.com/watch?v=f-ldPgEfAHI",
    "subject": "Science",
    "ageRange": "9-12",
    "grade": "3-5",
    "spec": "Build me an interactive web app to help a learner understand the stages of mitosis, and their importance in growth and repair.\n\nSPECIFICATIONS:\n1.  The app should display a single cell. Initially, the cell should be in Interphase (pre-mitosis). The cell should be cartoonish and engaging, similar to the cells in the Amoeba Sisters' video.\n2. The user should be able to advance the cell through the different stages of mitosis (Prophase, Metaphase, Anaphase, Telophase) via a 'Next Stage' button.  Each time the button is pressed, the cell should visually transform to represent the next stage. A label should indicate the current stage.\n3.  At each stage, a brief (one sentence) description of what's happening within the cell should be displayed.  For example, during Metaphase, the description might read: 'Chromosomes line up in the middle of the cell.'\n4.  The app should clearly illustrate the chromosomes within the cell, and show how the chromosomes are duplicated during interphase, and then separated during mitosis\n5. Finally, upon reaching Telophase, the app should show that the original cell has divided into two identical daughter cells, each with a complete set of chromosomes. The text 'Identical Daughter Cells!' should be displayed.\n6. The UI should be simple and intuitive, focusing on the visual transformation of the cell through the stages. The visual design should be inviting and playful, encouraging exploration.\n\nProvide the code as a single, self-contained HTML document. All styles and scripts must be inline. In the result, encase the code between \"```\" and \"```\" for easy parsing.",
    "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Mitosis Explorer</title>\n    <style>\n        body {\n            font-family: 'Comic Sans MS', 'Chalkboard SE', 'Marker Felt', sans-serif;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            min-height: 100vh;\n            background-color: #e0f7fa;\n            color: #004d40;\n            text-align: center;\n            overflow: hidden; /* Prevent scrollbars during transitions */\n        }\n\n        #app-container {\n            background-color: #ffffff;\n            padding: 30px;\n            border-radius: 20px;\n            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);\n            max-width: 600px;\n            width: 90%;\n        }\n\n        h1 {\n            color: #00796b;\n            margin-bottom: 10px;\n        }\n        h2 {\n            color: #00796b;\n            margin-top: 0;\n            margin-bottom: 15px;\n            font-size: 1.8em;\n            min-height: 1.8em; /* Prevent layout shifts */\n        }\n\n        #cell-visualization {\n            width: 100%;\n            max-width: 400px; /* Max size of SVG container */\n            height: 300px; /* Fixed height for SVG container */\n            margin: 20px auto;\n            background-color: #f0f0f0; /* Light background for contrast */\n            border-radius: 15px;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            overflow: hidden; /* Clip elements during transitions if needed */\n            border: 2px solid #b2dfdb;\n        }\n\n        #cell-svg {\n            width: 100%;\n            height: 100%;\n            display: block; /* Remove extra space below SVG */\n        }\n\n        /* Cell styles */\n        .cell-membrane {\n            fill: #ffebcd; /* Blanched Almond - cell color */\n            stroke: #d2b48c; /* Tan - cell outline */\n            stroke-width: 3;\n            transition: all 0.5s ease-in-out;\n        }\n        .nucleus-membrane {\n            fill: #add8e6; /* Light Blue - nucleus color */\n            stroke: #87ceeb; /* Sky Blue - nucleus outline */\n            stroke-width: 2;\n            transition: opacity 0.5s ease-in-out;\n        }\n\n        /* Chromosome styles */\n        .chromosome {\n            stroke-width: 5;\n            stroke-linecap: round;\n            transition: all 0.5s ease-in-out;\n        }\n        .chromo-pair1-stick1 { stroke: #ff6347; /* Tomato Red */ }\n        .chromo-pair1-stick2 { stroke: #ff6347; }\n        .chromo-pair2-stick1 { stroke: #4682b4; /* Steel Blue */ }\n        .chromo-pair2-stick2 { stroke: #4682b4; }\n\n        /* Spindle fibers */\n        .spindle-fiber {\n            stroke: #bdb76b; /* Dark Khaki */\n            stroke-width: 1;\n            stroke-dasharray: 3, 3;\n            transition: all 0.5s ease-in-out;\n        }\n\n        /* Centrioles / Poles */\n        .centriole {\n            fill: #b8860b; /* Dark Goldenrod */\n            transition: all 0.5s ease-in-out;\n        }\n\n\n        #stage-description {\n            margin-top: 15px;\n            font-size: 1.1em;\n            min-height: 3em; /* Reserve space to prevent jumps */\n            color: #004d40;\n        }\n\n        #next-button {\n            background-color: #00796b;\n            color: white;\n            border: none;\n            padding: 12px 25px;\n            border-radius: 25px;\n            font-size: 1.1em;\n            cursor: pointer;\n            transition: background-color 0.3s ease, transform 0.1s ease;\n            margin-top: 15px;\n            font-family: inherit; /* Use the same playful font */\n        }\n\n        #next-button:hover {\n            background-color: #004d40;\n        }\n        #next-button:active {\n            transform: scale(0.95);\n        }\n        #next-button:disabled {\n            background-color: #9e9e9e;\n            cursor: not-allowed;\n        }\n\n        #final-message {\n            color: #2e7d32; /* Dark Green */\n            font-weight: bold;\n            font-size: 1.5em;\n            margin-top: 20px;\n            display: none; /* Hidden initially */\n        }\n\n        /* Helper class for hiding elements */\n        .hidden {\n            display: none;\n            /* Using visibility might be better for transitions if elements should occupy space */\n            /* visibility: hidden;\n            opacity: 0; */\n        }\n\n    </style>\n</head>\n<body>\n\n    <div id=\"app-container\">\n        <h1>Magical Mitosis</h1>\n        <h2 id=\"stage-name\">Interphase</h2>\n\n        <div id=\"cell-visualization\">\n            <svg id=\"cell-svg\" viewBox=\"0 0 400 300\" preserveAspectRatio=\"xMidYMid meet\">\n                <!-- Define elements reusable across stages -->\n                <defs>\n                    <!-- Reusable chromosome parts (lines) -->\n                    <line id=\"c1s1\" class=\"chromosome chromo-pair1-stick1\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"20\" />\n                    <line id=\"c1s2\" class=\"chromosome chromo-pair1-stick2\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"20\" />\n                    <line id=\"c2s1\" class=\"chromosome chromo-pair2-stick1\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"30\" />\n                    <line id=\"c2s2\" class=\"chromosome chromo-pair2-stick2\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"30\" />\n                </defs>\n\n                <!-- Main Cell Membrane(s) -->\n                <ellipse id=\"cell-membrane-main\" class=\"cell-membrane\" cx=\"200\" cy=\"150\" rx=\"150\" ry=\"100\"/>\n                <ellipse id=\"cell-membrane-daughter1\" class=\"cell-membrane hidden\" cx=\"120\" cy=\"150\" rx=\"70\" ry=\"50\"/>\n                <ellipse id=\"cell-membrane-daughter2\" class=\"cell-membrane hidden\" cx=\"280\" cy=\"150\" rx=\"70\" ry=\"50\"/>\n\n                <!-- Nucleus Membrane -->\n                <ellipse id=\"nucleus-membrane\" class=\"nucleus-membrane\" cx=\"200\" cy=\"150\" rx=\"80\" ry=\"60\"/>\n\n                <!-- Chromosome Group -->\n                <g id=\"chromosomes-group\">\n                    <!-- These will be positioned by JS -->\n                    <!-- Pair 1 -->\n                    <use id=\"chromo1-stick1\" href=\"#c1s1\" x=\"180\" y=\"140\"/>\n                    <use id=\"chromo1-stick2\" href=\"#c1s2\" x=\"185\" y=\"140\" class=\"hidden\"/> <!-- Initially hidden duplicate -->\n                    <!-- Pair 2 -->\n                    <use id=\"chromo2-stick1\" href=\"#c2s1\" x=\"215\" y=\"135\"/>\n                    <use id=\"chromo2-stick2\" href=\"#c2s2\" x=\"220\" y=\"135\" class=\"hidden\"/> <!-- Initially hidden duplicate -->\n                </g>\n\n                <!-- Spindle Fibers Group -->\n                <g id=\"spindle-fibers-group\" class=\"hidden\">\n                    <!-- Lines will be added/updated by JS -->\n                </g>\n\n                <!-- Centrioles/Poles Group -->\n                <g id=\"poles-group\" class=\"hidden\">\n                    <circle id=\"pole-left\" class=\"centriole\" cx=\"50\" cy=\"150\" r=\"8\"/>\n                    <circle id=\"pole-right\" class=\"centriole\" cx=\"350\" cy=\"150\" r=\"8\"/>\n                </g>\n\n            </svg>\n        </div>\n\n        <p id=\"stage-description\">The cell grows, copies its DNA (chromosomes), and prepares for division.</p>\n        <button id=\"next-button\">Next Stage</button>\n        <p id=\"final-message\">Identical Daughter Cells!</p>\n    </div>\n\n    <script>\n        const stageNameEl = document.getElementById('stage-name');\n        const stageDescEl = document.getElementById('stage-description');\n        const nextButton = document.getElementById('next-button');\n        const finalMessageEl = document.getElementById('final-message');\n        const svg = document.getElementById('cell-svg');\n\n        // SVG Elements References\n        const cellMembraneMain = document.getElementById('cell-membrane-main');\n        const cellMembraneDaughter1 = document.getElementById('cell-membrane-daughter1');\n        const cellMembraneDaughter2 = document.getElementById('cell-membrane-daughter2');\n        const nucleusMembrane = document.getElementById('nucleus-membrane');\n        const chromosomesGroup = document.getElementById('chromosomes-group');\n        const spindleFibersGroup = document.getElementById('spindle-fibers-group');\n        const polesGroup = document.getElementById('poles-group');\n\n        // Chromosome elements\n        const chromo1Stick1 = document.getElementById('chromo1-stick1');\n        const chromo1Stick2 = document.getElementById('chromo1-stick2');\n        const chromo2Stick1 = document.getElementById('chromo2-stick1');\n        const chromo2Stick2 = document.getElementById('chromo2-stick2');\n\n        // --- Stage Definitions ---\n        const stages = [\n            {\n                name: \"Interphase\",\n                description: \"The cell grows, copies its DNA (chromosomes), and prepares for division.\",\n                action: drawInterphase\n            },\n            {\n                name: \"Prophase\",\n                description: \"Chromosomes condense and become visible, the nucleus disappears.\",\n                action: drawProphase\n            },\n            {\n                name: \"Metaphase\",\n                description: \"Chromosomes line up in the middle of the cell.\",\n                action: drawMetaphase\n            },\n            {\n                name: \"Anaphase\",\n                description: \"Sister chromatids separate and move to opposite ends of the cell.\",\n                action: drawAnaphase\n            },\n            {\n                name: \"Telophase\",\n                description: \"Chromosomes arrive at poles, new nuclei form, and the cell begins to divide.\",\n                action: drawTelophase\n            },\n            {\n                name: \"Cytokinesis\",\n                description: \"The cytoplasm divides, resulting in two identical daughter cells.\",\n                action: drawCytokinesis // This will show the final state\n            }\n        ];\n\n        let currentStageIndex = 0;\n\n        // --- Drawing Functions ---\n\n        function resetVisuals() {\n            // Hide elements that aren't always visible\n            nucleusMembrane.style.opacity = '1';\n            nucleusMembrane.classList.remove('hidden');\n            polesGroup.classList.add('hidden');\n            spindleFibersGroup.classList.add('hidden');\n            spindleFibersGroup.innerHTML = ''; // Clear old fibers\n            finalMessageEl.style.display = 'none';\n            cellMembraneMain.classList.remove('hidden');\n            cellMembraneMain.setAttribute('rx', 150); // Reset main cell shape\n            cellMembraneDaughter1.classList.add('hidden');\n            cellMembraneDaughter2.classList.add('hidden');\n\n            // Reset chromosome visibility and basic structure (single sticks)\n            chromo1Stick1.classList.remove('hidden');\n            chromo1Stick2.classList.add('hidden');\n            chromo2Stick1.classList.remove('hidden');\n            chromo2Stick2.classList.add('hidden');\n\n            // Reset transformations\n            chromo1Stick1.setAttribute('transform', '');\n            chromo1Stick2.setAttribute('transform', '');\n            chromo2Stick1.setAttribute('transform', '');\n            chromo2Stick2.setAttribute('transform', '');\n        }\n\n        function drawInterphase() {\n            resetVisuals();\n            // Position initial chromosomes loosely inside nucleus\n            chromo1Stick1.setAttribute('x', 180);\n            chromo1Stick1.setAttribute('y', 140);\n            chromo2Stick1.setAttribute('x', 215);\n            chromo2Stick1.setAttribute('y', 135);\n\n            // Simulate DNA duplication (chromosomes become Xs visually in Prophase)\n            // Here we just ensure the duplicates are hidden\n            chromo1Stick2.classList.add('hidden');\n            chromo2Stick2.classList.add('hidden');\n        }\n\n        function drawProphase() {\n            resetVisuals(); // Start clean slate except for inherited state\n            nucleusMembrane.style.opacity = '0'; // Fade out nucleus\n            polesGroup.classList.remove('hidden'); // Show poles\n\n            // Make chromosomes visible as 'X' shapes (sister chromatids joined)\n            // Position them condensed within the fading nucleus area\n            const xOffset = 5; // Offset for the second stick to form X\n\n            // Chromosome 1 (Red)\n            chromo1Stick1.setAttribute('x', 175);\n            chromo1Stick1.setAttribute('y', 130);\n            chromo1Stick1.setAttribute('transform', 'rotate(-30 175 140)'); // Rotate slightly\n            chromo1Stick2.classList.remove('hidden');\n            chromo1Stick2.setAttribute('x', 175 + xOffset); // Position near first stick\n            chromo1Stick2.setAttribute('y', 130);\n            chromo1Stick2.setAttribute('transform', 'rotate(30 180 140)'); // Rotate opposite way\n\n            // Chromosome 2 (Blue)\n            chromo2Stick1.setAttribute('x', 210);\n            chromo2Stick1.setAttribute('y', 145);\n            chromo2Stick1.setAttribute('transform', 'rotate(-30 210 160)');\n            chromo2Stick2.classList.remove('hidden');\n            chromo2Stick2.setAttribute('x', 210 + xOffset);\n            chromo2Stick2.setAttribute('y', 145);\n            chromo2Stick2.setAttribute('transform', 'rotate(30 215 160)');\n        }\n\n        function drawMetaphase() {\n            nucleusMembrane.style.opacity = '0'; // Keep nucleus hidden\n            polesGroup.classList.remove('hidden');\n            spindleFibersGroup.classList.remove('hidden');\n            spindleFibersGroup.innerHTML = ''; // Clear previous fibers\n\n            // Center X-shaped chromosomes on the metaphase plate (center line x=200)\n            const xOffset = 5;\n            const centerLineX = 200;\n            const poleLeftX = 50, poleRightX = 350, poleY = 150;\n\n            // Chromosome 1 (Red) - Position around y=130\n            const c1Y = 130;\n            chromo1Stick1.setAttribute('x', centerLineX - xOffset / 2);\n            chromo1Stick1.setAttribute('y', c1Y - 10); // Y adjusted for stick length\n            chromo1Stick1.setAttribute('transform', 'rotate(-30 200 130)');\n            chromo1Stick2.setAttribute('x', centerLineX - xOffset / 2);\n            chromo1Stick2.setAttribute('y', c1Y - 10);\n            chromo1Stick2.setAttribute('transform', 'rotate(30 200 130)');\n            addSpindleFiber(poleLeftX, poleY, centerLineX - xOffset / 2, c1Y);\n            addSpindleFiber(poleRightX, poleY, centerLineX + xOffset / 2, c1Y);\n\n\n            // Chromosome 2 (Blue) - Position around y=170\n            const c2Y = 170;\n            chromo2Stick1.setAttribute('x', centerLineX - xOffset / 2);\n            chromo2Stick1.setAttribute('y', c2Y - 15); // Y adjusted for stick length\n            chromo2Stick1.setAttribute('transform', 'rotate(-30 200 170)');\n            chromo2Stick2.setAttribute('x', centerLineX - xOffset / 2);\n            chromo2Stick2.setAttribute('y', c2Y - 15);\n            chromo2Stick2.setAttribute('transform', 'rotate(30 200 170)');\n            addSpindleFiber(poleLeftX, poleY, centerLineX - xOffset / 2, c2Y);\n            addSpindleFiber(poleRightX, poleY, centerLineX + xOffset / 2, c2Y);\n\n        }\n\n        function addSpindleFiber(x1, y1, x2, y2) {\n            const fiber = document.createElementNS('http://www.w3.org/2000/svg', 'line');\n            fiber.setAttribute('class', 'spindle-fiber');\n            fiber.setAttribute('x1', x1);\n            fiber.setAttribute('y1', y1);\n            fiber.setAttribute('x2', x2);\n            fiber.setAttribute('y2', y2);\n            spindleFibersGroup.appendChild(fiber);\n        }\n\n        function drawAnaphase() {\n            nucleusMembrane.style.opacity = '0';\n            polesGroup.classList.remove('hidden');\n            spindleFibersGroup.classList.remove('hidden');\n            spindleFibersGroup.innerHTML = ''; // Clear old fibers\n\n            // Separate sister chromatids and move them towards poles\n            const poleLeftX = 80; // Target X near left pole\n            const poleRightX = 320; // Target X near right pole\n            const poleY = 150; // Y coordinate of poles\n\n            // Chromosome 1 (Red) - sticks move apart\n            chromo1Stick1.setAttribute('x', poleLeftX);\n            chromo1Stick1.setAttribute('y', 140);\n            chromo1Stick1.setAttribute('transform', 'rotate(0)'); // Straighten\n            chromo1Stick2.setAttribute('x', poleRightX);\n            chromo1Stick2.setAttribute('y', 140);\n            chromo1Stick2.setAttribute('transform', 'rotate(0)'); // Straighten\n\n            // Chromosome 2 (Blue) - sticks move apart\n            chromo2Stick1.setAttribute('x', poleLeftX + 10); // Slightly offset\n            chromo2Stick1.setAttribute('y', 135);\n            chromo2Stick1.setAttribute('transform', 'rotate(0)'); // Straighten\n            chromo2Stick2.setAttribute('x', poleRightX - 10); // Slightly offset\n            chromo2Stick2.setAttribute('y', 135);\n            chromo2Stick2.setAttribute('transform', 'rotate(0)'); // Straighten\n\n            // Draw shorter spindle fibers pulling them\n            addSpindleFiber(50, poleY, poleLeftX, 150);\n            addSpindleFiber(50, poleY, poleLeftX + 10, 150);\n            addSpindleFiber(350, poleY, poleRightX, 150);\n            addSpindleFiber(350, poleY, poleRightX - 10, 150);\n\n            // Optional: Start pinching the cell membrane slightly\n            cellMembraneMain.setAttribute('rx', 145);\n            cellMembraneMain.setAttribute('ry', 95);\n        }\n\n        function drawTelophase() {\n            polesGroup.classList.add('hidden'); // Poles disappear\n            spindleFibersGroup.classList.add('hidden'); // Fibers disappear\n            spindleFibersGroup.innerHTML = '';\n\n            // Chromosomes arrive at poles (now single chromatids)\n            const poleLeftX = 80;\n            const poleRightX = 320;\n\n            // Position chromatids at poles (no longer X's)\n            chromo1Stick1.setAttribute('x', poleLeftX);\n            chromo1Stick1.setAttribute('y', 140);\n            chromo1Stick2.setAttribute('x', poleRightX); // This is now a separate chromosome\n            chromo1Stick2.setAttribute('y', 140);\n            chromo2Stick1.setAttribute('x', poleLeftX + 10);\n            chromo2Stick1.setAttribute('y', 135);\n            chromo2Stick2.setAttribute('x', poleRightX - 10); // This is now a separate chromosome\n            chromo2Stick2.setAttribute('y', 135);\n\n            // Hide the 'duplicate' stick for each pair? No, they *are* the chromosomes now.\n            // We need to conceptually treat them as full sets at each pole.\n\n            // Start forming new nuclei (visually represented by fading them in later or just pinching cell)\n            // Pinch the cell membrane significantly\n            cellMembraneMain.setAttribute('rx', 120); // Pinch more\n            cellMembraneMain.setAttribute('ry', 80); // Pinch more\n\n             // In a more complex viz, you'd draw faint nucleus outlines here\n        }\n\n        function drawCytokinesis() {\n            // Hide the main cell membrane\n             cellMembraneMain.classList.add('hidden');\n             nucleusMembrane.classList.add('hidden'); // Ensure original nucleus is gone\n             polesGroup.classList.add('hidden');\n             spindleFibersGroup.classList.add('hidden');\n\n            // Show the two daughter cells\n            cellMembraneDaughter1.classList.remove('hidden');\n            cellMembraneDaughter2.classList.remove('hidden');\n\n            // Position the chromosomes inside the daughter cells\n            // Daughter Cell 1 (Left)\n            const d1CenterX = 120;\n            const d1CenterY = 150;\n            chromo1Stick1.setAttribute('x', d1CenterX - 15);\n            chromo1Stick1.setAttribute('y', d1CenterY - 10);\n            chromo2Stick1.setAttribute('x', d1CenterX + 5);\n            chromo2Stick1.setAttribute('y', d1CenterY - 15);\n\n            // Daughter Cell 2 (Right)\n            const d2CenterX = 280;\n            const d2CenterY = 150;\n            chromo1Stick2.setAttribute('x', d2CenterX - 15); // Was at right pole\n            chromo1Stick2.setAttribute('y', d2CenterY - 10);\n            chromo2Stick2.setAttribute('x', d2CenterX + 5);  // Was at right pole\n            chromo2Stick2.setAttribute('y', d2CenterY - 15);\n\n            // Display final message and disable button\n            finalMessageEl.style.display = 'block';\n            nextButton.disabled = true;\n            nextButton.textContent = \"Finished!\";\n        }\n\n\n        // --- Event Listener ---\n        nextButton.addEventListener('click', () => {\n            currentStageIndex++;\n            if (currentStageIndex < stages.length) {\n                const currentStage = stages[currentStageIndex];\n                stageNameEl.textContent = currentStage.name;\n                stageDescEl.textContent = currentStage.description;\n                // Call the drawing function for the new stage\n                currentStage.action();\n            }\n             // Button disabling is handled within drawCytokinesis\n        });\n\n        // --- Initial Setup ---\n        function initialize() {\n            currentStageIndex = 0; // Start at Interphase\n            const initialStage = stages[currentStageIndex];\n            stageNameEl.textContent = initialStage.name;\n            stageDescEl.textContent = initialStage.description;\n            initialStage.action(); // Draw Interphase\n            nextButton.disabled = false; // Ensure button is enabled initially\n            nextButton.textContent = \"Next Stage\";\n            finalMessageEl.style.display = 'none'; // Hide final message\n        }\n\n        // Initialize the app when the page loads\n        initialize();\n\n    </script>\n\n</body>\n</html>"
  },
    {
    "title": "Learn to Count with Numberblocks",
    "url": "https://www.youtube.com/watch?v=N0_x_f9a_oA",
    "subject": "Math",
    "ageRange": "3-5",
    "grade": "Preschool",
    "spec": "Build an interactive web app to help young children learn to count from 1 to 5, inspired by the Numberblocks video. The app should focus on associating numbers with quantities in a fun, visual way.\n\nSPECIFICATIONS:\n1. The app should display a number from 1 to 5. The starting number should be 1.\n2. Below the number, the app should display a corresponding number of colorful, friendly-looking blocks (like Numberblocks).\n3. The app must have 'Next' and 'Previous' buttons. When the 'Next' button is clicked, the app should advance to the next number (e.g., from 1 to 2), and the number of blocks shown should update accordingly. The 'Previous' button should do the reverse.\n4. When a number is displayed, the app should have a large, clickable speaker icon. When clicked, the app should play an audio file saying the number out loud (e.g., 'One!').\n5. Clicking on the blocks themselves should also trigger the number sound and a simple, fun animation on the blocks (e.g., they bounce or wiggle).\n6. The visual design should be extremely simple, bright, and engaging for a preschool audience, with large, easy-to-click buttons and clear, big text.\n\nProvide the code as a single, self-contained HTML document. All styles and scripts must be inline. In the result, encase the code between \"```\" and \"```\" for easy parsing.",
    "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Learn to Count</title>\n    <style>\n        @import url('https://fonts.googleapis.com/css2?family=Fredoka+One&display=swap');\n\n        body {\n            font-family: 'Fredoka One', cursive;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            min-height: 100vh;\n            background-color: #87CEEB; /* Sky Blue */\n            color: #333;\n            text-align: center;\n            -webkit-user-select: none; /* Safari */\n            -ms-user-select: none; /* IE 10+ */\n            user-select: none; /* Standard syntax */\n        }\n\n        #app-container {\n            background-color: #fff;\n            padding: 2em;\n            border-radius: 20px;\n            box-shadow: 0 10px 0 #4682B4; /* Steel Blue */\n            border: 5px solid #fff;\n            width: 90%;\n            max-width: 500px;\n        }\n\n        #display-area {\n            margin-bottom: 2em;\n        }\n\n        #number-display {\n            font-size: 8em;\n            color: #FF6347; /* Tomato */\n            line-height: 1;\n            text-shadow: 4px 4px 0 #ddd;\n            display: inline-block;\n            margin-right: 0.2em;\n        }\n\n        #speaker-button {\n            font-size: 4em;\n            cursor: pointer;\n            background: none;\n            border: none;\n            color: #FFD700; /* Gold */\n            vertical-align: middle;\n            transition: transform 0.1s ease;\n        }\n\n        #speaker-button:hover {\n            transform: scale(1.1);\n        }\n        #speaker-button:active {\n            transform: scale(0.9);\n        }\n\n        #blocks-container {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            flex-wrap: wrap;\n            gap: 10px;\n            min-height: 100px;\n            cursor: pointer;\n            margin-bottom: 2em;\n        }\n\n        .block {\n            width: 60px;\n            height: 60px;\n            border-radius: 10px;\n            box-shadow: 0 5px 0 rgba(0,0,0,0.2);\n            transition: transform 0.2s ease;\n            border: 3px solid rgba(0,0,0,0.1);\n        }\n        \n        .block.bouncing {\n            animation: bounce 0.5s ease;\n        }\n\n        @keyframes bounce {\n            0%, 100% { transform: translateY(0) rotate(0deg); }\n            25% { transform: translateY(-15px) rotate(-5deg); }\n            50% { transform: translateY(0) rotate(0deg); }\n            75% { transform: translateY(-7px) rotate(5deg); }\n        }\n\n        /* Block Colors */\n        .block[data-color=\"red\"] { background-color: #FF4136; }\n        .block[data-color=\"orange\"] { background-color: #FF851B; }\n        .block[data-color=\"yellow\"] { background-color: #FFDC00; }\n        .block[data-color=\"green\"] { background-color: #2ECC40; }\n        .block[data-color=\"blue\"] { background-color: #0074D9; }\n\n        #controls {\n            display: flex;\n            justify-content: space-between;\n        }\n\n        .nav-button {\n            font-family: 'Fredoka One', cursive;\n            font-size: 2em;\n            padding: 0.5em 1em;\n            border: none;\n            border-radius: 15px;\n            color: white;\n            cursor: pointer;\n            box-shadow: 0 6px 0 #27ae60;\n            transition: all 0.1s ease;\n        }\n        \n        #prev-button {\n            background-color: #e67e22; /* Carrot */\n            box-shadow: 0 6px 0 #d35400; /* Pumpkin */\n        }\n        \n        #next-button {\n            background-color: #2ecc71; /* Emerald */\n            box-shadow: 0 6px 0 #27ae60; /* Nephritis */\n        }\n\n        .nav-button:active {\n            transform: translateY(4px);\n            box-shadow: 0 2px 0 #27ae60;\n        }\n         #prev-button:active {\n            box-shadow: 0 2px 0 #d35400;\n         }\n\n        .nav-button:disabled {\n            background-color: #bdc3c7; /* Silver */\n            box-shadow: 0 6px 0 #95a5a6; /* Asbestos */\n            cursor: not-allowed;\n        }\n\n    </style>\n</head>\n<body>\n\n    <div id=\"app-container\">\n        <div id=\"display-area\">\n            <span id=\"number-display\">1</span>\n            <button id=\"speaker-button\" title=\"Say the number\">&#x1F50A;</button>\n        </div>\n\n        <div id=\"blocks-container\">\n            <!-- Blocks will be generated here -->\n        </div>\n\n        <div id=\"controls\">\n            <button id=\"prev-button\" class=\"nav-button\">Prev</button>\n            <button id=\"next-button\" class=\"nav-button\">Next</button>\n        </div>\n    </div>\n\n    <script>\n        const numberDisplay = document.getElementById('number-display');\n        const blocksContainer = document.getElementById('blocks-container');\n        const prevButton = document.getElementById('prev-button');\n        const nextButton = document.getElementById('next-button');\n        const speakerButton = document.getElementById('speaker-button');\n\n        const minNumber = 1;\n        const maxNumber = 5;\n        let currentNumber = 1;\n\n        const blockColors = ['red', 'orange', 'yellow', 'green', 'blue'];\n\n        // --- Speech Synthesis ---\n        // Use Web Speech API for saying numbers\n        function sayNumber(num) {\n            if ('speechSynthesis' in window) {\n                const utterance = new SpeechSynthesisUtterance(num);\n                utterance.lang = 'en-US';\n                utterance.rate = 0.9;\n                speechSynthesis.speak(utterance);\n            } else {\n                console.warn('Web Speech API not supported in this browser.');\n                // You could add a fallback here to play pre-recorded audio files.\n            }\n        }\n\n        // --- UI Update Functions ---\n        function updateDisplay() {\n            // Update the big number\n            numberDisplay.textContent = currentNumber;\n\n            // Update the blocks\n            blocksContainer.innerHTML = ''; // Clear existing blocks\n            for (let i = 0; i < currentNumber; i++) {\n                const block = document.createElement('div');\n                block.classList.add('block');\n                // Assign a color based on its index\n                block.dataset.color = blockColors[i % blockColors.length];\n                blocksContainer.appendChild(block);\n            }\n\n            // Update button states\n            prevButton.disabled = currentNumber === minNumber;\n            nextButton.disabled = currentNumber === maxNumber;\n        }\n\n        function animateBlocks() {\n            const blocks = blocksContainer.querySelectorAll('.block');\n            blocks.forEach((block, index) => {\n                // Stagger the animation slightly\n                setTimeout(() => {\n                    block.classList.add('bouncing');\n                    // Remove class after animation ends to allow re-triggering\n                    block.addEventListener('animationend', () => {\n                        block.classList.remove('bouncing');\n                    }, { once: true });\n                }, index * 100);\n            });\n        }\n\n        // --- Event Handlers ---\n        nextButton.addEventListener('click', () => {\n            if (currentNumber < maxNumber) {\n                currentNumber++;\n                updateDisplay();\n                sayNumber(currentNumber);\n                 animateBlocks();\n            }\n        });\n\n        prevButton.addEventListener('click', () => {\n            if (currentNumber > minNumber) {\n                currentNumber--;\n                updateDisplay();\n                sayNumber(currentNumber);\n                 animateBlocks();\n            }\n        });\n\n        function handleSoundAndAnimation() {\n            sayNumber(currentNumber);\n            animateBlocks();\n        }\n\n        speakerButton.addEventListener('click', handleSoundAndAnimation);\n        blocksContainer.addEventListener('click', handleSoundAndAnimation);\n\n        // --- Initial Setup ---\n        updateDisplay(); // Set the initial state\n\n    </script>\n</body>\n</html>"
  },
  {
    "title": "Basic Addition for Kids",
    "url": "https://www.youtube.com/watch?v=kGmsk_kF_Bs",
    "subject": "Math",
    "ageRange": "6-8",
    "grade": "K-2",
    "spec": "Build an interactive web app to help children practice basic addition. The app should present simple addition problems in a clear, visual way and provide instant feedback.\n\nSPECIFICATIONS:\n1. The app should display a simple addition problem, such as '3 + 2 = ?'. The numbers used should be between 1 and 9.\n2. Below the numbers, the app must visually represent each number with a set of countable objects (e.g., apples, stars, or simple circles).\n3. The app should provide the user with three multiple-choice answer buttons. One button will have the correct answer, and the other two will be incorrect but plausible answers.\n4. When the user clicks an answer button, the app must provide immediate visual feedback. If the answer is correct, display a happy message like 'Correct!' or a smiling emoji. If it's incorrect, show a gentle message like 'Try again!' or a thinking emoji.\n5. After a correct answer is chosen, a 'Next Question' button should appear, allowing the user to get a new, randomly generated addition problem.\n6. The app should keep track of a 'score' or a 'streak' of correct answers to motivate the user.\n7. The design should be colorful, friendly, and uncluttered, making it easy for early elementary students to understand and use.\n\nProvide the code as a single, self-contained HTML document. All styles and scripts must be inline. In the result, encase the code between \"```\" and \"```\" for easy parsing.",
    "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Basic Addition Practice</title>\n    <style>\n        @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@600;700&display=swap');\n\n        :root {\n            --bg-color: #92DDF6; /* Light Blue */\n            --panel-color: #FFFFFF;\n            --text-color: #3D4A5C; /* Dark Slate Grey */\n            --correct-color: #2ECC71; /* Green */\n            --incorrect-color: #E74C3C; /* Red */\n            --button-color: #3498DB; /* Blue */\n            --button-hover: #2980B9;\n        }\n\n        body {\n            font-family: 'Poppins', sans-serif;\n            background-color: var(--bg-color);\n            color: var(--text-color);\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            min-height: 100vh;\n            margin: 0;\n            padding: 1em;\n            box-sizing: border-box;\n        }\n\n        #app-container {\n            background-color: var(--panel-color);\n            padding: 2em;\n            border-radius: 20px;\n            box-shadow: 0 8px 16px rgba(0,0,0,0.2);\n            text-align: center;\n            width: 100%;\n            max-width: 550px;\n        }\n\n        #score-tracker {\n            text-align: right;\n            font-size: 1.2em;\n            font-weight: 700;\n            color: var(--button-color);\n            margin-bottom: 1em;\n        }\n\n        #problem-container {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            margin-bottom: 1em;\n            font-size: 4em;\n            font-weight: 700;\n        }\n        \n        .problem-number, .problem-operator, .problem-equals, .problem-answer {\n             padding: 0 0.2em;\n        }\n\n        #visual-container {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            gap: 2em;\n            margin-bottom: 1.5em;\n            min-height: 80px;\n        }\n\n        .object-group {\n            display: flex;\n            flex-wrap: wrap;\n            justify-content: center;\n            gap: 8px;\n            max-width: 150px;\n        }\n\n        .object {\n            width: 30px;\n            height: 30px;\n            background-color: #F1C40F; /* Yellow */\n            border-radius: 50%;\n            border: 2px solid #f39c12; /* Orange */\n            box-shadow: 0 3px 0 #f39c12;\n        }\n        \n        .plus-sign {\n            font-size: 3em;\n            font-weight: 700;\n            color: #bdc3c7;\n        }\n\n        #answers-container {\n            display: flex;\n            justify-content: center;\n            gap: 1em;\n            margin-bottom: 1.5em;\n        }\n\n        .answer-button {\n            font-family: 'Poppins', sans-serif;\n            font-size: 2em;\n            font-weight: 700;\n            color: white;\n            background-color: var(--button-color);\n            border: none;\n            border-radius: 10px;\n            padding: 0.5em 1em;\n            cursor: pointer;\n            min-width: 100px;\n            transition: all 0.2s ease;\n            box-shadow: 0 5px 0 var(--button-hover);\n        }\n\n        .answer-button:not(:disabled):hover {\n            background-color: var(--button-hover);\n        }\n        \n        .answer-button:not(:disabled):active {\n            transform: translateY(3px);\n            box-shadow: 0 2px 0 var(--button-hover);\n        }\n\n        .answer-button.correct {\n            background-color: var(--correct-color);\n            box-shadow: 0 5px 0 #27AE60;\n            animation: pulse 0.5s;\n        }\n\n        .answer-button.incorrect {\n            background-color: var(--incorrect-color);\n            box-shadow: 0 5px 0 #C0392B;\n            animation: shake 0.5s;\n        }\n        \n        .answer-button:disabled {\n            cursor: not-allowed;\n        }\n\n        @keyframes pulse {\n            0% { transform: scale(1); }\n            50% { transform: scale(1.1); }\n            100% { transform: scale(1); }\n        }\n\n        @keyframes shake {\n            0%, 100% { transform: translateX(0); }\n            25% { transform: translateX(-5px); }\n            75% { transform: translateX(5px); }\n        }\n\n        #feedback-area {\n            min-height: 1.5em;\n            font-size: 1.5em;\n            font-weight: 600;\n            margin-bottom: 1em;\n        }\n\n        .feedback-correct { color: var(--correct-color); }\n        .feedback-incorrect { color: var(--incorrect-color); }\n\n        #next-button {\n            font-family: 'Poppins', sans-serif;\n            font-size: 1.2em;\n            font-weight: 600;\n            color: white;\n            background-color: #9B59B6; /* Purple */\n            border: none;\n            border-radius: 10px;\n            padding: 0.8em 1.5em;\n            cursor: pointer;\n            visibility: hidden; /* Hidden by default */\n            transition: background-color 0.2s ease;\n        }\n        #next-button:hover {\n            background-color: #8E44AD;\n        }\n\n    </style>\n</head>\n<body>\n\n    <div id=\"app-container\">\n        <div id=\"score-tracker\">Streak: <span id=\"streak-value\">0</span></div>\n\n        <div id=\"problem-container\">\n            <div id=\"num1\" class=\"problem-number\">3</div>\n            <div class=\"problem-operator\">+</div>\n            <div id=\"num2\" class=\"problem-number\">2</div>\n            <div class=\"problem-equals\">=</div>\n            <div id=\"answer-placeholder\" class=\"problem-answer\">?</div>\n        </div>\n\n        <div id=\"visual-container\">\n            <div id=\"group1\" class=\"object-group\"></div>\n            <div class=\"plus-sign\">+</div>\n            <div id=\"group2\" class=\"object-group\"></div>\n        </div>\n\n        <div id=\"answers-container\">\n            <!-- Answer buttons generated by JS -->\n        </div>\n\n        <div id=\"feedback-area\"></div>\n\n        <button id=\"next-button\">Next Question</button>\n    </div>\n\n    <script>\n        // DOM Elements\n        const streakValueEl = document.getElementById('streak-value');\n        const num1El = document.getElementById('num1');\n        const num2El = document.getElementById('num2');\n        const answerPlaceholderEl = document.getElementById('answer-placeholder');\n        const group1El = document.getElementById('group1');\n        const group2El = document.getElementById('group2');\n        const answersContainerEl = document.getElementById('answers-container');\n        const feedbackAreaEl = document.getElementById('feedback-area');\n        const nextButtonEl = document.getElementById('next-button');\n\n        // State\n        let num1, num2, correctAnswer;\n        let streak = 0;\n\n        function getRandomInt(min, max) {\n            return Math.floor(Math.random() * (max - min + 1)) + min;\n        }\n\n        function generateProblem() {\n            num1 = getRandomInt(1, 9);\n            num2 = getRandomInt(1, 9);\n            correctAnswer = num1 + num2;\n\n            // Generate answer choices\n            const answers = new Set([correctAnswer]);\n            while (answers.size < 3) {\n                // Generate plausible wrong answers\n                let wrongAnswer = correctAnswer + getRandomInt(-3, 3);\n                if (wrongAnswer === correctAnswer || wrongAnswer < 1) {\n                    wrongAnswer++; // ensure it's not the same and positive\n                }\n                answers.add(wrongAnswer);\n            }\n            \n            // Shuffle answers\n            const shuffledAnswers = Array.from(answers).sort(() => Math.random() - 0.5);\n\n            renderProblem(shuffledAnswers);\n        }\n\n        function renderProblem(answers) {\n            // Reset UI\n            feedbackAreaEl.textContent = '';\n            feedbackAreaEl.className = '';\n            nextButtonEl.style.visibility = 'hidden';\n            answerPlaceholderEl.textContent = '?';\n            \n            // Display numbers\n            num1El.textContent = num1;\n            num2El.textContent = num2;\n\n            // Display visual objects\n            group1El.innerHTML = '';\n            group2El.innerHTML = '';\n            for(let i = 0; i < num1; i++) {\n                 group1El.innerHTML += '<div class=\"object\"></div>';\n            }\n            for(let i = 0; i < num2; i++) {\n                 group2El.innerHTML += '<div class=\"object\"></div>';\n            }\n\n            // Display answer buttons\n            answersContainerEl.innerHTML = '';\n            answers.forEach(answer => {\n                const button = document.createElement('button');\n                button.classList.add('answer-button');\n                button.textContent = answer;\n                button.dataset.value = answer;\n                button.addEventListener('click', checkAnswer);\n                answersContainerEl.appendChild(button);\n            });\n        }\n\n        function checkAnswer(event) {\n            const selectedAnswer = parseInt(event.target.dataset.value, 10);\n            const allButtons = answersContainerEl.querySelectorAll('.answer-button');\n\n            // Disable all buttons after one is clicked\n            allButtons.forEach(button => button.disabled = true);\n\n            if (selectedAnswer === correctAnswer) {\n                // Correct\n                event.target.classList.add('correct');\n                feedbackAreaEl.textContent = 'Correct! Great job! ✨';\n                feedbackAreaEl.className = 'feedback-correct';\n                streak++;\n                nextButtonEl.style.visibility = 'visible';\n                answerPlaceholderEl.textContent = correctAnswer;\n            } else {\n                // Incorrect\n                event.target.classList.add('incorrect');\n                feedbackAreaEl.textContent = 'Not quite, try again! 🤔';\n                feedbackAreaEl.className = 'feedback-incorrect';\n                streak = 0;\n                // Highlight the correct answer after a short delay\n                setTimeout(() => {\n                    allButtons.forEach(button => {\n                        if (parseInt(button.dataset.value, 10) === correctAnswer) {\n                            button.classList.add('correct');\n                        }\n                    });\n                     nextButtonEl.style.visibility = 'visible';\n                }, 1000);\n            }\n\n            streakValueEl.textContent = streak;\n        }\n\n        // Event Listeners\n        nextButtonEl.addEventListener('click', generateProblem);\n\n        // Initial Load\n        generateProblem();\n\n    </script>\n</body>\n</html>"
  },
  {
    "title": "The Continents of the World",
    "url": "https://www.youtube.com/watch?v=K6DSMZ8b3LE",
    "subject": "Geography",
    "ageRange": "6-8",
    "grade": "K-2",
    "spec": "Build an interactive web app to help children learn the names and locations of the seven continents. The app should be a simple drag-and-drop game.\n\nSPECIFICATIONS:\n1. The app must display a simplified, unlabeled world map. The outlines for the continents should be clearly visible.\n2. The app must display a list or 'bank' of the seven continent names: North America, South America, Europe, Asia, Africa, Australia, and Antarctica.\n3. The user should be able to drag a continent name from the bank and drop it onto the corresponding continent outline on the map.\n4. When a name is dropped on the correct continent, it should 'snap' into place and the continent on the map should light up or change color. A positive sound effect should play.\n5. If a name is dropped on the wrong continent, it should animate back to the name bank, and a gentle 'try again' sound or visual cue should be given.\n6. The app should display a congratulatory message and a 'Play Again' button once all seven continents have been correctly labeled.\n7. The visual style should be simple, colorful, and map-like, suitable for young learners.\n\nProvide the code as a single, self-contained HTML document. All styles and scripts must be inline. In the result, encase the code between \"```\" and \"```\" for easy parsing.",
    "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Drag and Drop Continents</title>\n    <style>\n        body {\n            font-family: 'Arial Rounded MT Bold', sans-serif;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            justify-content: center;\n            min-height: 100vh;\n            background-color: #A9D2E8; /* Light blue sea */\n            margin: 0;\n        }\n\n        h1 {\n            color: #fff;\n            text-shadow: 2px 2px 4px #00000055;\n            margin-bottom: 20px;\n        }\n\n        #game-container {\n            display: flex;\n            flex-wrap: wrap; /* Allow wrapping for smaller screens */\n            justify-content: center;\n            align-items: flex-start;\n            gap: 20px;\n            padding: 20px;\n        }\n\n        #map-container {\n            width: 700px;\n            height: 500px;\n            position: relative;\n            background-color: #87CEEB; /* Lighter blue water */\n            border-radius: 15px;\n            border: 3px solid #fff;\n            box-shadow: 0 5px 15px rgba(0,0,0,0.2);\n        }\n\n        .continent-outline {\n            position: absolute;\n            background-color: #D2B48C; /* Tan landmass */\n            border: 2px solid #8B4513; /* Saddle Brown */\n            transition: background-color 0.3s ease, transform 0.2s ease;\n        }\n        .continent-outline.correct {\n             background-color: #90EE90; /* Light Green */\n             border: 2px solid #2E8B57; /* Sea Green */\n             pointer-events: none; /* Can't drop on it again */\n        }\n        .continent-outline.drag-over {\n            background-color: #F0E68C; /* Khaki */\n            transform: scale(1.02);\n        }\n\n        /* Specific continent positions and shapes (using clip-path for non-rectangular shapes) */\n        #north-america { top: 30px; left: 50px; width: 250px; height: 200px; clip-path: polygon(0% 20%, 30% 0%, 100% 0%, 80% 60%, 50% 100%, 20% 80%); }\n        #south-america { top: 250px; left: 180px; width: 120px; height: 180px; clip-path: polygon(20% 0%, 100% 0%, 80% 100%, 0% 100%); }\n        #africa { top: 200px; left: 350px; width: 150px; height: 170px; clip-path: polygon(50% 0%, 100% 30%, 80% 100%, 20% 100%, 0% 50%); }\n        #europe { top: 80px; left: 380px; width: 120px; height: 100px; clip-path: polygon(0% 0%, 100% 0%, 100% 100%, 50% 100%, 20% 50%); }\n        #asia { top: 50px; left: 470px; width: 200px; height: 200px; clip-path: polygon(20% 0%, 100% 0%, 100% 80%, 50% 100%, 0% 60%); }\n        #australia { top: 350px; left: 550px; width: 100px; height: 80px; clip-path: polygon(0% 20%, 80% 0%, 100% 100%, 20% 100%); }\n        #antarctica { top: 450px; left: 250px; width: 300px; height: 45px; border-radius: 10px; }\n\n        #name-bank {\n            background-color: #fff;\n            padding: 15px;\n            border-radius: 10px;\n            display: flex;\n            flex-direction: column;\n            gap: 10px;\n            box-shadow: 0 5px 15px rgba(0,0,0,0.2);\n            min-width: 150px;\n        }\n\n        .continent-name {\n            background-color: #F0E68C; /* Khaki */\n            padding: 10px 15px;\n            border-radius: 8px;\n            cursor: grab;\n            text-align: center;\n            font-weight: bold;\n            border: 2px solid #DEB887; /* Burlywood */\n            user-select: none;\n            transition: opacity 0.3s ease, transform 0.2s ease;\n        }\n        .continent-name.dragging {\n            opacity: 0.5;\n            cursor: grabbing;\n        }\n        .continent-name.placed {\n            opacity: 0.3;\n            cursor: not-allowed;\n            background-color: #ddd;\n        }\n        \n        #completion-message {\n            position: absolute;\n            top: 50%;\n            left: 50%;\n            transform: translate(-50%, -50%) scale(0.1);\n            background-color: rgba(255, 255, 255, 0.9);\n            padding: 30px 50px;\n            border-radius: 20px;\n            text-align: center;\n            box-shadow: 0 10px 20px rgba(0,0,0,0.2);\n            visibility: hidden;\n            transition: all 0.3s cubic-bezier(0.18, 0.89, 0.32, 1.28); /* Bouncy transition */\n            z-index: 100;\n        }\n        #completion-message.show {\n            visibility: visible;\n            transform: translate(-50%, -50%) scale(1);\n        }\n        #completion-message h2 {\n            color: #2E8B57;\n            margin: 0 0 10px 0;\n        }\n        #play-again-button {\n            padding: 10px 20px;\n            font-size: 1em;\n            font-family: inherit;\n            border: none;\n            background-color: #FF6347; /* Tomato */\n            color: #fff;\n            border-radius: 8px;\n            cursor: pointer;\n        }\n\n    </style>\n</head>\n<body>\n    <h1>Where in the World?</h1>\n    <div id=\"game-container\">\n        <div id=\"name-bank\">\n            <!-- Names will be generated here -->\n        </div>\n        <div id=\"map-container\">\n            <!-- Continent outlines -->\n            <div id=\"north-america\" class=\"continent-outline\" data-continent=\"North America\"></div>\n            <div id=\"south-america\" class=\"continent-outline\" data-continent=\"South America\"></div>\n            <div id=\"africa\" class=\"continent-outline\" data-continent=\"Africa\"></div>\n            <div id=\"europe\" class=\"continent-outline\" data-continent=\"Europe\"></div>\n            <div id=\"asia\" class=\"continent-outline\" data-continent=\"Asia\"></div>\n            <div id=\"australia\" class=\"continent-outline\" data-continent=\"Australia\"></div>\n            <div id=\"antarctica\" class=\"continent-outline\" data-continent=\"Antarctica\"></div>\n            \n            <div id=\"completion-message\">\n                <h2>You did it!</h2>\n                <p>You know all the continents!</p>\n                <button id=\"play-again-button\">Play Again</button>\n            </div>\n        </div>\n    </div>\n    \n    <audio id=\"correct-sound\" src=\"data:audio/wav;base64,UklGRlIAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhQgAAAAI=\"></audio>\n    <audio id=\"incorrect-sound\" src=\"data:audio/wav;base64,UklGRlIAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhQgAAAAI=\"></audio>\n\n    <script>\n        const continentNames = ['North America', 'South America', 'Europe', 'Asia', 'Africa', 'Australia', 'Antarctica'];\n        const nameBank = document.getElementById('name-bank');\n        const outlines = document.querySelectorAll('.continent-outline');\n        const completionMessage = document.getElementById('completion-message');\n        const playAgainButton = document.getElementById('play-again-button');\n        const correctSound = document.getElementById('correct-sound'); // Placeholder sound\n        const incorrectSound = document.getElementById('incorrect-sound'); // Placeholder sound\n\n        let correctPlacements = 0;\n\n        function initializeGame() {\n            correctPlacements = 0;\n            nameBank.innerHTML = '';\n            completionMessage.classList.remove('show');\n            \n            // Shuffle names for variety\n            const shuffledNames = [...continentNames].sort(() => Math.random() - 0.5);\n\n            shuffledNames.forEach(name => {\n                const nameEl = document.createElement('div');\n                nameEl.textContent = name;\n                nameEl.classList.add('continent-name');\n                nameEl.draggable = true;\n                nameEl.dataset.continent = name;\n                nameBank.appendChild(nameEl);\n            });\n\n            outlines.forEach(outline => {\n                outline.classList.remove('correct');\n                 if (outline.querySelector('.label')) {\n                    outline.querySelector('.label').remove();\n                }\n            });\n            \n            addDragListeners();\n        }\n\n        function addDragListeners() {\n            const draggables = document.querySelectorAll('.continent-name:not(.placed)');\n\n            draggables.forEach(draggable => {\n                draggable.addEventListener('dragstart', () => {\n                    draggable.classList.add('dragging');\n                });\n\n                draggable.addEventListener('dragend', () => {\n                    draggable.classList.remove('dragging');\n                });\n            });\n\n            outlines.forEach(outline => {\n                outline.addEventListener('dragover', e => {\n                    if (!outline.classList.contains('correct')) {\n                        e.preventDefault();\n                        outline.classList.add('drag-over');\n                    }\n                });\n\n                outline.addEventListener('dragleave', () => {\n                    outline.classList.remove('drag-over');\n                });\n\n                outline.addEventListener('drop', e => {\n                    e.preventDefault();\n                    outline.classList.remove('drag-over');\n                    const draggedName = document.querySelector('.dragging').dataset.continent;\n\n                    if (outline.dataset.continent === draggedName) {\n                        handleCorrectDrop(outline, draggedName);\n                    } else {\n                        handleIncorrectDrop();\n                    }\n                });\n            });\n        }\n\n        function handleCorrectDrop(outline, name) {\n            outline.classList.add('correct');\n            const draggedEl = document.querySelector(`.continent-name[data-continent=\"${name}\"]`);\n            draggedEl.classList.add('placed');\n            draggedEl.draggable = false;\n            \n            // Create and place label\n            const label = document.createElement('div');\n            label.textContent = name;\n            label.className = 'label';\n            label.style.fontWeight = 'bold';\n            label.style.color = '#333';\n            outline.appendChild(label);\n\n            try { correctSound.play(); } catch(e) {}\n            \n            correctPlacements++;\n            if (correctPlacements === continentNames.length) {\n                setTimeout(() => completionMessage.classList.add('show'), 500);\n            }\n        }\n\n        function handleIncorrectDrop() {\n            const draggedEl = document.querySelector('.dragging');\n            draggedEl.style.transition = 'transform 0.3s ease';\n            draggedEl.style.transform = 'translateX(-10px)';\n            setTimeout(() => {\n                draggedEl.style.transform = 'translateX(10px)';\n                setTimeout(() => {\n                    draggedEl.style.transform = 'translateX(0px)';\n                }, 150)\n            }, 150);\n            try { incorrectSound.play(); } catch(e) {}\n        }\n\n        playAgainButton.addEventListener('click', initializeGame);\n\n        // Start game on load\n        initializeGame();\n\n    </script>\n</body>\n</html>"
  },
  {
    "title": "The Dot by Peter H. Reynolds",
    "url": "https://www.youtube.com/watch?v=t5mGeR4AQdM",
    "subject": "English",
    "ageRange": "3-5",
    "grade": "Preschool",
    "spec": "The video tells the story of Vashti, who believes she cannot draw. The key idea is about overcoming creative blocks and celebrating individuality and self-expression, starting with a single small mark.\n\nBuild me an interactive web app that encourages creative expression, inspired by 'The Dot'.\n\nSPECIFICATIONS:\n1. The app should present a large, blank white canvas, similar to Vashti's empty art paper.\n2. The user can click anywhere on the canvas to make a dot. The first click should create a simple, small black dot.\n3. The app must have controls to change the color and size of the dot the user is about to place. Provide a selection of at least 5 different colors.\n4. After placing a dot, the user can continue clicking to place more dots of various sizes and colors, creating their own unique artwork.\n5. The app should have a 'Sign It' button. When clicked, it should prompt the user to type their name. Once entered, their name should be displayed neatly below their artwork, just like Vashti signed her painting.\n6. An 'Erase' or 'Start Over' button must be available to clear the canvas and begin a new creation.\n7. The overall design should be minimalist, clean, and encouraging, putting the focus entirely on the user's creation on the canvas.\n\nProvide the code as a single, self-contained HTML document. All styles and scripts must be inline. In the result, encase the code between \"```\" and \"```\" for easy parsing.",
    "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Make Your Mark</title>\n    <style>\n        body {\n            font-family: 'Helvetica Neue', sans-serif;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            justify-content: center;\n            min-height: 100vh;\n            background-color: #f0f0f0;\n            margin: 0;\n            padding: 20px;\n            box-sizing: border-box;\n        }\n        h1 {\n            color: #444;\n            margin-bottom: 20px;\n        }\n        #art-area {\n            position: relative;\n            width: 100%;\n            max-width: 700px;\n            margin: 0 auto;\n            box-shadow: 0 4px 15px rgba(0,0,0,0.1);\n        }\n        #canvas {\n            background-color: #fff;\n            border: 10px solid #ddd;\n            cursor: crosshair;\n            display: block; /* Remove extra space below canvas */\n            width: 100%;\n            height: auto;\n        }\n        #signature {\n            position: absolute;\n            bottom: 20px;\n            right: 20px;\n            font-family: 'Caveat', cursive; /* A nice handwriting font */\n            font-size: 1.5em;\n            color: #555;\n            font-weight: bold;\n            display: none; /* Initially hidden */\n        }\n        #controls {\n            margin-top: 20px;\n            background-color: #fff;\n            padding: 15px;\n            border-radius: 8px;\n            box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n            display: flex;\n            flex-wrap: wrap;\n            gap: 15px;\n            align-items: center;\n            justify-content: center;\n        }\n        .control-group {\n            display: flex;\n            align-items: center;\n            gap: 10px;\n        }\n        .color-palette {\n            display: flex;\n            gap: 5px;\n        }\n        .color-box {\n            width: 30px;\n            height: 30px;\n            border: 2px solid #fff;\n            border-radius: 50%;\n            cursor: pointer;\n            box-shadow: 0 0 5px rgba(0,0,0,0.2);\n            transition: transform 0.2s;\n        }\n        .color-box:hover {\n            transform: scale(1.1);\n        }\n        .color-box.selected {\n            border-color: #333;\n            box-shadow: 0 0 8px rgba(0,0,0,0.4);\n        }\n        label {\n            font-weight: bold;\n            color: #555;\n        }\n        input[type=\"range\"] {\n            cursor: pointer;\n        }\n        button {\n            padding: 10px 15px;\n            font-size: 1em;\n            font-weight: bold;\n            border: none;\n            border-radius: 5px;\n            cursor: pointer;\n            background-color: #5a9bd3;\n            color: white;\n            transition: background-color 0.2s;\n        }\n        button:hover {\n            background-color: #487aa9;\n        }\n        #start-over-btn {\n            background-color: #d9534f;\n        }\n        #start-over-btn:hover {\n             background-color: #c9302c;\n        }\n    </style>\n    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css2?family=Caveat:wght@700&display=swap\">\n</head>\n<body>\n    <h1>Make your mark, and see where it takes you.</h1>\n    <div id=\"art-area\">\n        <canvas id=\"canvas\" width=\"700\" height=\"500\"></canvas>\n        <div id=\"signature\"></div>\n    </div>\n    <div id=\"controls\">\n        <div class=\"control-group\">\n            <label>Color:</label>\n            <div class=\"color-palette\">\n                <!-- Colors generated by script -->\n            </div>\n        </div>\n        <div class=\"control-group\">\n            <label for=\"size-slider\">Size:</label>\n            <input type=\"range\" id=\"size-slider\" min=\"2\" max=\"100\" value=\"10\">\n        </div>\n        <button id=\"sign-btn\">Sign It</button>\n        <button id=\"start-over-btn\">Start Over</button>\n    </div>\n\n    <script>\n        const canvas = document.getElementById('canvas');\n        const ctx = canvas.getContext('2d');\n        const colorPalette = document.querySelector('.color-palette');\n        const sizeSlider = document.getElementById('size-slider');\n        const signBtn = document.getElementById('sign-btn');\n        const startOverBtn = document.getElementById('start-over-btn');\n        const signatureDiv = document.getElementById('signature');\n\n        const colors = ['#000000', '#FF5733', '#33FF57', '#3357FF', '#FF33A1', '#FFC300', '#A133FF'];\n        let selectedColor = colors[0];\n        let dotSize = sizeSlider.value;\n        let hasMadeFirstMark = false;\n\n        // --- Setup Controls ---\n        function setupControls() {\n            colors.forEach(color => {\n                const colorBox = document.createElement('div');\n                colorBox.classList.add('color-box');\n                colorBox.style.backgroundColor = color;\n                colorBox.dataset.color = color;\n                if (color === selectedColor) {\n                    colorBox.classList.add('selected');\n                }\n                colorBox.addEventListener('click', () => {\n                    selectedColor = color;\n                    document.querySelector('.color-box.selected').classList.remove('selected');\n                    colorBox.classList.add('selected');\n                });\n                colorPalette.appendChild(colorBox);\n            });\n\n            sizeSlider.addEventListener('input', (e) => {\n                dotSize = e.target.value;\n            });\n        }\n\n        // --- Canvas Logic ---\n        function getMousePos(e) {\n            const rect = canvas.getBoundingClientRect();\n            const scaleX = canvas.width / rect.width;\n            const scaleY = canvas.height / rect.height;\n            return {\n                x: (e.clientX - rect.left) * scaleX,\n                y: (e.clientY - rect.top) * scaleY\n            };\n        }\n\n        function drawDot(x, y, size, color) {\n            ctx.beginPath();\n            ctx.arc(x, y, size / 2, 0, Math.PI * 2);\n            ctx.fillStyle = color;\n            ctx.fill();\n        }\n\n        canvas.addEventListener('click', (e) => {\n            const pos = getMousePos(e);\n            let sizeToDraw = dotSize;\n            let colorToDraw = selectedColor;\n\n            // For the very first click, make it a small black dot, like in the story.\n            if (!hasMadeFirstMark) {\n                sizeToDraw = 5;\n                colorToDraw = '#000000';\n                hasMadeFirstMark = true;\n            }\n            \n            drawDot(pos.x, pos.y, sizeToDraw, colorToDraw);\n        });\n\n        // --- Button Logic ---\n        signBtn.addEventListener('click', () => {\n            const name = prompt(\"Sign your masterpiece! What is your name?\");\n            if (name) {\n                signatureDiv.textContent = `~ ${name}`;\n                signatureDiv.style.display = 'block';\n            }\n        });\n\n        function clearCanvas() {\n             ctx.clearRect(0, 0, canvas.width, canvas.height);\n             signatureDiv.textContent = '';\n             signatureDiv.style.display = 'none';\n             hasMadeFirstMark = false;\n        }\n\n        startOverBtn.addEventListener('click', () => {\n            if (confirm(\"Are you sure you want to start over?\")) {\n                clearCanvas();\n            }\n        });\n\n        // --- Initial Setup ---\n        setupControls();\n\n    </script>\n</body>\n</html>"
  },
    {
    "title": "How Chords Work",
    "url": "https://www.youtube.com/watch?v=JfD0nHrJDC0",
    "subject": "English",
    "ageRange": "9-12",
    "grade": "3-5",
    "spec": "Build me an interactive web app to help a learner understand triads and their inversions.\n\nSPECIFICATIONS:\n1.  The app must feature an interactive keyboard. When a key is pressed, the corresponding note should sound.\n2.  The app must allow the user to select a root note (C, D, E, F, G, A, or B).  This root note should be displayed clearly. The root note should default to C.\n3. The app must allow the user to select a triad type (Major, Minor, Diminished, Augmented). The triad type should be displayed clearly. The triad type should default to Major.\n4. The app must allow the user to select an inversion (Root position, First Inversion, Second Inversion). The inversion should be displayed clearly. The inversion should default to Root Position.\n5. Based on the selected root, triad type, and inversion, the app must highlight the corresponding notes on the keyboard.  The notes should also sound.\n6. The app must display the formula for generating the triad in terms of intervals (e.g., for C Major, it should display 'Root: C, Third: Major Third, Fifth: Perfect Fifth'). For inversions, it should explicitly state which note is the lowest (e.g., 'Lowest note is Third').\n7.  The app must be responsive and work well on both desktop and mobile devices.\n\nProvide the code as a single, self-contained HTML document. All styles and scripts must be inline. In the result, encase the code between \"```\" and \"```\" for easy parsing.",
    "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Triads and Inversions</title>\n    <style>\n        /* Basic Reset & Body Styling */\n        * {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n        }\n\n        body {\n            font-family: sans-serif;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            padding: 20px;\n            background-color: #f0f0f0;\n            color: #333;\n        }\n\n        /* Main Container */\n        .app-container {\n            background-color: #fff;\n            padding: 20px;\n            border-radius: 8px;\n            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n            width: 100%;\n            max-width: 800px; /* Limit max width on desktop */\n            margin-bottom: 20px;\n        }\n\n        h1 {\n            text-align: center;\n            margin-bottom: 20px;\n            color: #2c3e50;\n        }\n\n        /* Controls Section */\n        .controls {\n            display: flex;\n            flex-wrap: wrap; /* Allow wrapping on smaller screens */\n            justify-content: space-around;\n            margin-bottom: 25px;\n            gap: 15px; /* Spacing between control groups */\n        }\n\n        .control-group {\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n        }\n\n        .control-group label {\n            margin-bottom: 5px;\n            font-weight: bold;\n            color: #555;\n        }\n\n        .control-group select {\n            padding: 8px 12px;\n            border: 1px solid #ccc;\n            border-radius: 4px;\n            min-width: 120px; /* Ensure decent width */\n            background-color: #fff;\n            cursor: pointer;\n        }\n\n        /* Info Display Section */\n        .info-display {\n            background-color: #e9ecef;\n            padding: 15px;\n            border-radius: 5px;\n            margin-bottom: 25px;\n            border: 1px solid #ced4da;\n        }\n\n        .info-display p {\n            margin-bottom: 8px;\n            line-height: 1.5;\n        }\n\n        .info-display strong {\n           color: #343a40;\n        }\n\n        /* Keyboard Section */\n        .keyboard-container {\n            width: 100%;\n            margin: 0 auto; /* Center the keyboard */\n            overflow-x: auto; /* Allow horizontal scroll if needed on very small screens */\n            padding-bottom: 10px; /* Space for scrollbar if it appears */\n        }\n\n        .keyboard {\n            display: flex;\n            position: relative;\n            height: 180px; /* Adjust height as needed */\n            width: max-content; /* Allow keyboard to determine its own width */\n            min-width: 100%; /* Ensure it tries to fill container */\n            margin: 0 auto; /* Center within container */\n            border: 2px solid #555;\n            border-radius: 5px;\n            background-color: #333; /* Background visible between keys */\n        }\n\n        .key {\n            cursor: pointer;\n            border: 1px solid #555;\n            transition: background-color 0.1s ease;\n            display: flex;\n            align-items: flex-end; /* Position note name at bottom */\n            justify-content: center;\n            padding-bottom: 5px;\n            font-size: 0.8em;\n            position: relative; /* Needed for absolute positioning of black keys */\n        }\n\n        .key.white {\n            background-color: #ffffff;\n            width: 50px; /* Adjust width */\n            height: 100%;\n            color: #333;\n            border-bottom-left-radius: 4px;\n            border-bottom-right-radius: 4px;\n            z-index: 1; /* White keys below black keys */\n        }\n\n        .key.black {\n            background-color: #333333;\n            width: 30px; /* Adjust width */\n            height: 60%;\n            color: #ffffff;\n            position: absolute;\n            top: 0;\n            margin-left: -15px; /* Half its width to center over white key boundary */\n            z-index: 2; /* Black keys above white keys */\n            border-bottom-left-radius: 3px;\n            border-bottom-right-radius: 3px;\n        }\n\n        /* Specific positioning for black keys */\n        .key[data-note^=\"C#\"], .key[data-note^=\"Db\"] { margin-left: -15px; left: 50px; }\n        .key[data-note^=\"D#\"], .key[data-note^=\"Eb\"] { margin-left: -15px; left: 100px; }\n        .key[data-note^=\"F#\"], .key[data-note^=\"Gb\"] { margin-left: -15px; left: 200px; }\n        .key[data-note^=\"G#\"], .key[data-note^=\"Ab\"] { margin-left: -15px; left: 250px; }\n        .key[data-note^=\"A#\"], .key[data-note^=\"Bb\"] { margin-left: -15px; left: 300px; }\n\n        /* Adjust positions for subsequent octaves */\n        .key[data-note^=\"C#5\"], .key[data-note^=\"Db5\"] { left: calc(50px + 7 * 50px); }\n        .key[data-note^=\"D#5\"], .key[data-note^=\"Eb5\"] { left: calc(100px + 7 * 50px); }\n        .key[data-note^=\"F#5\"], .key[data-note^=\"Gb5\"] { left: calc(200px + 7 * 50px); }\n        .key[data-note^=\"G#5\"], .key[data-note^=\"Ab5\"] { left: calc(250px + 7 * 50px); }\n        .key[data-note^=\"A#5\"], .key[data-note^=\"Bb5\"] { left: calc(300px + 7 * 50px); }\n\n        .key:active, .key.pressed {\n            background-color: #a0a0a0; /* Visual feedback on press */\n        }\n        .key.white:active, .key.white.pressed { background-color: #d0d0d0; }\n        .key.black:active, .key.black.pressed { background-color: #666666; }\n\n        .key.highlighted {\n            background-color: #4a90e2; /* Highlight color for triad notes */\n            color: white;\n            border: 2px solid #1a5dab;\n        }\n        .key.black.highlighted {\n             background-color: #3a7bc8;\n             color: white;\n             border: 1px solid #1a5dab;\n        }\n\n         /* Responsive Adjustments */\n        @media (max-width: 768px) {\n            .key.white { width: 40px; }\n            .key.black { width: 24px; margin-left: -12px; }\n            /* Adjust black key positions based on new white key width */\n            .key[data-note^=\"C#\"], .key[data-note^=\"Db\"] { left: 40px; }\n            .key[data-note^=\"D#\"], .key[data-note^=\"Eb\"] { left: 80px; }\n            .key[data-note^=\"F#\"], .key[data-note^=\"Gb\"] { left: 160px; }\n            .key[data-note^=\"G#\"], .key[data-note^=\"Ab\"] { left: 200px; }\n            .key[data-note^=\"A#\"], .key[data-note^=\"Bb\"] { left: 240px; }\n            .key[data-note^=\"C#5\"], .key[data-note^=\"Db5\"] { left: calc(40px + 7 * 40px); }\n            .key[data-note^=\"D#5\"], .key[data-note^=\"Eb5\"] { left: calc(80px + 7 * 40px); }\n            .key[data-note^=\"F#5\"], .key[data-note^=\"Gb5\"] { left: calc(160px + 7 * 40px); }\n            .key[data-note^=\"G#5\"], .key[data-note^=\"Ab5\"] { left: calc(200px + 7 * 40px); }\n            .key[data-note^=\"A#5\"], .key[data-note^=\"Bb5\"] { left: calc(240px + 7 * 40px); }\n\n            .keyboard { height: 150px; }\n            .key.black { height: 55%; }\n            .key { font-size: 0.7em; }\n        }\n\n         @media (max-width: 500px) {\n            body { padding: 10px; }\n            .app-container { padding: 15px; }\n            h1 { font-size: 1.5em; }\n            .controls { flex-direction: column; align-items: stretch; gap: 10px; }\n            .control-group select { width: 100%; }\n\n            .key.white { width: 35px; }\n            .key.black { width: 21px; margin-left: -10.5px; }\n            /* Adjust black key positions based on new white key width */\n            .key[data-note^=\"C#\"], .key[data-note^=\"Db\"] { left: 35px; }\n            .key[data-note^=\"D#\"], .key[data-note^=\"Eb\"] { left: 70px; }\n            .key[data-note^=\"F#\"], .key[data-note^=\"Gb\"] { left: 140px; }\n            .key[data-note^=\"G#\"], .key[data-note^=\"Ab\"] { left: 175px; }\n            .key[data-note^=\"A#\"], .key[data-note^=\"Bb\"] { left: 210px; }\n            .key[data-note^=\"C#5\"], .key[data-note^=\"Db5\"] { left: calc(35px + 7 * 35px); }\n            .key[data-note^=\"D#5\"], .key[data-note^=\"Eb5\"] { left: calc(70px + 7 * 35px); }\n            .key[data-note^=\"F#5\"], .key[data-note^=\"Gb5\"] { left: calc(140px + 7 * 35px); }\n            .key[data-note^=\"G#5\"], .key[data-note^=\"Ab5\"] { left: calc(175px + 7 * 35px); }\n            .key[data-note^=\"A#5\"], .key[data-note^=\"Bb5\"] { left: calc(210px + 7 * 35px); }\n\n            .keyboard { height: 130px; }\n            .key.black { height: 50%; }\n            .key { font-size: 0.6em; padding-bottom: 3px; }\n        }\n\n    </style>\n</head>\n<body>\n\n    <div class=\"app-container\">\n        <h1>Triads and Inversions</h1>\n\n        <div class=\"controls\">\n            <div class=\"control-group\">\n                <label for=\"root-select\">Root Note:</label>\n                <select id=\"root-select\">\n                    <option value=\"C\">C</option>\n                    <option value=\"D\">D</option>\n                    <option value=\"E\">E</option>\n                    <option value=\"F\">F</option>\n                    <option value=\"G\">G</option>\n                    <option value=\"A\">A</option>\n                    <option value=\"B\">B</option>\n                </select>\n            </div>\n            <div class=\"control-group\">\n                <label for=\"triad-select\">Triad Type:</label>\n                <select id=\"triad-select\">\n                    <option value=\"Major\">Major</option>\n                    <option value=\"Minor\">Minor</option>\n                    <option value=\"Diminished\">Diminished</option>\n                    <option value=\"Augmented\">Augmented</option>\n                </select>\n            </div>\n            <div class=\"control-group\">\n                <label for=\"inversion-select\">Inversion:</label>\n                <select id=\"inversion-select\">\n                    <option value=\"Root Position\">Root Position</option>\n                    <option value=\"First Inversion\">First Inversion</option>\n                    <option value=\"Second Inversion\">Second Inversion</option>\n                </select>\n            </div>\n        </div>\n\n        <div class=\"info-display\">\n            <p><strong>Selection:</strong> <span id=\"selection-info\">C Major, Root Position</span></p>\n            <p><strong>Formula:</strong> <span id=\"formula-info\">Root: C, Third: Major Third (E), Fifth: Perfect Fifth (G)</span></p>\n            <p><strong>Notes:</strong> <span id=\"notes-info\">C4, E4, G4</span></p>\n            <p id=\"lowest-note-info-container\" style=\"display: none;\"><strong>Lowest Note:</strong> <span id=\"lowest-note-info\"></span></p>\n        </div>\n\n        <div class=\"keyboard-container\">\n            <div class=\"keyboard\" id=\"keyboard\">\n                <!-- Keys will be generated by JavaScript -->\n            </div>\n        </div>\n    </div>\n\n    <script>\n        document.addEventListener('DOMContentLoaded', () => {\n            const keyboardDiv = document.getElementById('keyboard');\n            const rootSelect = document.getElementById('root-select');\n            const triadSelect = document.getElementById('triad-select');\n            const inversionSelect = document.getElementById('inversion-select');\n            const selectionInfo = document.getElementById('selection-info');\n            const formulaInfo = document.getElementById('formula-info');\n            const notesInfo = document.getElementById('notes-info');\n            const lowestNoteInfoContainer = document.getElementById('lowest-note-info-container');\n            const lowestNoteInfo = document.getElementById('lowest-note-info');\n\n            let audioContext; // Initialize on first interaction\n            const oscillators = {}; // Keep track of playing notes for stopping\n\n            // --- Audio Setup ---\n            function initAudioContext() {\n                if (!audioContext) {\n                    try {\n                        audioContext = new (window.AudioContext || window.webkitAudioContext)();\n                    } catch (e) {\n                        console.error(\"Web Audio API is not supported in this browser\", e);\n                        alert(\"Web Audio API is not supported in this browser. Sound playback will not work.\");\n                    }\n                }\n            }\n\n            function noteToFrequency(note) {\n                const noteFrequencies = {\n                    'C3': 130.81, 'C#3': 138.59, 'Db3': 138.59, 'D3': 146.83, 'D#3': 155.56, 'Eb3': 155.56, 'E3': 164.81, 'F3': 174.61, 'F#3': 185.00, 'Gb3': 185.00, 'G3': 196.00, 'G#3': 207.65, 'Ab3': 207.65, 'A3': 220.00, 'A#3': 233.08, 'Bb3': 233.08, 'B3': 246.94,\n                    'C4': 261.63, 'C#4': 277.18, 'Db4': 277.18, 'D4': 293.66, 'D#4': 311.13, 'Eb4': 311.13, 'E4': 329.63, 'F4': 349.23, 'F#4': 369.99, 'Gb4': 369.99, 'G4': 392.00, 'G#4': 415.30, 'Ab4': 415.30, 'A4': 440.00, 'A#4': 466.16, 'Bb4': 466.16, 'B4': 493.88,\n                    'C5': 523.25, 'C#5': 554.37, 'Db5': 554.37, 'D5': 587.33, 'D#5': 622.25, 'Eb5': 622.25, 'E5': 659.25, 'F5': 698.46, 'F#5': 739.99, 'Gb5': 739.99, 'G5': 783.99, 'G#5': 830.61, 'Ab5': 830.61, 'A5': 880.00, 'A#5': 932.33, 'Bb5': 932.33, 'B5': 987.77,\n                    'C6': 1046.50\n                };\n                return noteFrequencies[note];\n            }\n\n            function playNote(note, duration = 0.6) {\n                initAudioContext(); // Ensure context is ready\n                if (!audioContext) return;\n\n                const freq = noteToFrequency(note);\n                if (!freq) {\n                    console.warn(`Frequency not found for note: ${note}`);\n                    return;\n                }\n\n                // Stop existing oscillator for this note if any\n                if (oscillators[note]) {\n                    try {\n                         oscillators[note].stop();\n                    } catch(e) { /* Ignore errors if already stopped */ }\n                    delete oscillators[note];\n                }\n\n                const oscillator = audioContext.createOscillator();\n                const gainNode = audioContext.createGain();\n\n                oscillator.type = 'sine'; // 'sine', 'square', 'sawtooth', 'triangle'\n                oscillator.frequency.setValueAtTime(freq, audioContext.currentTime);\n                gainNode.gain.setValueAtTime(0.3, audioContext.currentTime); // Start with volume\n\n                // Fade out\n                gainNode.gain.exponentialRampToValueAtTime(0.001, audioContext.currentTime + duration * 0.9);\n\n                oscillator.connect(gainNode);\n                gainNode.connect(audioContext.destination);\n\n                oscillator.start(audioContext.currentTime);\n                oscillators[note] = oscillator; // Store reference\n\n                // Schedule stop\n                oscillator.stop(audioContext.currentTime + duration);\n                 // Clean up reference after stop\n                setTimeout(() => {\n                     if (oscillators[note] === oscillator) {\n                         delete oscillators[note];\n                     }\n                }, duration * 1000);\n            }\n\n            function playChord(notes) {\n                 initAudioContext(); // Ensure context is ready before playing\n                 if (!audioContext) return;\n                 notes.forEach(note => playNote(note, 1.0)); // Play chord notes for longer duration\n            }\n\n            // --- Music Theory Logic ---\n            const notesSharp = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];\n            const notesFlat = ['C', 'Db', 'D', 'Eb', 'E', 'F', 'Gb', 'G', 'Ab', 'A', 'Bb', 'B'];\n\n            // Use flats for certain keys for conventional spelling\n            const shouldUseFlats = (rootNote) => ['F', 'Bb', 'Eb', 'Ab', 'Db', 'Gb'].includes(rootNote) || rootNote.includes('b');\n\n            // Function to get note name based on index and preference for sharp/flat\n            function getNoteName(index, preferFlat = false) {\n                const noteSet = preferFlat ? notesFlat : notesSharp;\n                return noteSet[index % 12];\n            }\n\n            // Get semitone index from root (0-11)\n            function getNoteIndex(noteName) {\n                let index = notesSharp.indexOf(noteName);\n                if (index === -1) index = notesFlat.indexOf(noteName);\n                return index;\n            }\n\n            // Calculate triad notes relative to root index\n            function calculateTriadIntervals(triadType) {\n                switch (triadType) {\n                    case 'Major': return { third: 4, fifth: 7, thirdName: \"Major Third\", fifthName: \"Perfect Fifth\" };\n                    case 'Minor': return { third: 3, fifth: 7, thirdName: \"Minor Third\", fifthName: \"Perfect Fifth\" };\n                    case 'Diminished': return { third: 3, fifth: 6, thirdName: \"Minor Third\", fifthName: \"Diminished Fifth\" };\n                    case 'Augmented': return { third: 4, fifth: 8, thirdName: \"Major Third\", fifthName: \"Augmented Fifth\" };\n                    default: return { third: 4, fifth: 7, thirdName: \"Major Third\", fifthName: \"Perfect Fifth\" }; // Default to Major\n                }\n            }\n\n            // Get specific note names with octave\n            function getTriadNotes(rootNote, triadType, startOctave = 4) {\n                const rootIndex = getNoteIndex(rootNote);\n                const intervals = calculateTriadIntervals(triadType);\n                const preferFlat = shouldUseFlats(rootNote);\n\n                const rootName = getNoteName(rootIndex, preferFlat);\n                const thirdIndex = rootIndex + intervals.third;\n                const fifthIndex = rootIndex + intervals.fifth;\n\n                const thirdName = getNoteName(thirdIndex, preferFlat);\n                const fifthName = getNoteName(fifthIndex, preferFlat);\n\n                // Basic octave assignment (adjust if note wraps past B)\n                const rootOctave = startOctave;\n                const thirdOctave = thirdIndex >= 12 ? startOctave + 1 : startOctave;\n                const fifthOctave = fifthIndex >= 12 ? startOctave + 1 : startOctave;\n\n                return [\n                    { name: rootName, octave: rootOctave, note: `${rootName}${rootOctave}`, role: \"Root\" },\n                    { name: thirdName, octave: thirdOctave, note: `${thirdName}${thirdOctave}`, role: \"Third\" },\n                    { name: fifthName, octave: fifthOctave, note: `${fifthName}${fifthOctave}`, role: \"Fifth\" }\n                ];\n            }\n\n            function applyInversion(rootPositionNotes, inversionType) {\n                const notes = [...rootPositionNotes]; // Copy array\n                let invertedNotes = [];\n                let lowestNoteRole = \"Root\";\n\n                switch (inversionType) {\n                    case 'First Inversion':\n                        // Third becomes lowest note. Root moves up an octave.\n                        const root = notes[0];\n                        const third = notes[1];\n                        const fifth = notes[2];\n                        invertedNotes = [\n                            { ...third }, // Keep original third object\n                            { ...fifth }, // Keep original fifth object\n                            { ...root, octave: root.octave + 1, note: `${root.name}${root.octave + 1}` } // Root goes up\n                        ];\n                        lowestNoteRole = \"Third\";\n                        break;\n                    case 'Second Inversion':\n                        // Fifth becomes lowest note. Root and Third move up an octave.\n                        const root2 = notes[0];\n                        const third2 = notes[1];\n                        const fifth2 = notes[2];\n                         invertedNotes = [\n                            { ...fifth2 }, // Keep original fifth object\n                            { ...root2, octave: root2.octave + 1, note: `${root2.name}${root2.octave + 1}` }, // Root goes up\n                            { ...third2, octave: third2.octave + 1, note: `${third2.name}${third2.octave + 1}` } // Third goes up\n                        ];\n                         lowestNoteRole = \"Fifth\";\n                        break;\n                    case 'Root Position':\n                    default:\n                        invertedNotes = notes;\n                        lowestNoteRole = \"Root\";\n                        break;\n                }\n                 // Sort by frequency for consistent display/playing order if needed, though order matters for inversion definition\n                // For this app, the order defined above IS the inversion.\n                return { invertedNotes, lowestNoteRole };\n            }\n\n\n            // --- Keyboard Generation ---\n            function createKeyboard() {\n                keyboardDiv.innerHTML = ''; // Clear existing keys\n                const keys = [\n                    // Octave 4\n                    { note: 'C4', type: 'white' }, { note: 'C#4', type: 'black' }, { note: 'D4', type: 'white' }, { note: 'D#4', type: 'black' }, { note: 'E4', type: 'white' },\n                    { note: 'F4', type: 'white' }, { note: 'F#4', type: 'black' }, { note: 'G4', type: 'white' }, { note: 'G#4', type: 'black' }, { note: 'A4', type: 'white' }, { note: 'A#4', type: 'black' }, { note: 'B4', type: 'white' },\n                    // Octave 5\n                    { note: 'C5', type: 'white' }, { note: 'C#5', type: 'black' }, { note: 'D5', type: 'white' }, { note: 'D#5', type: 'black' }, { note: 'E5', type: 'white' },\n                    { note: 'F5', type: 'white' }, { note: 'F#5', type: 'black' }, { note: 'G5', type: 'white' }, { note: 'G#5', type: 'black' }, { note: 'A5', type: 'white' }, { note: 'A#5', type: 'black' }, { note: 'B5', type: 'white' },\n                     // Add C6 for range\n                    { note: 'C6', type: 'white' }\n                ];\n\n                keys.forEach(keyInfo => {\n                    const keyElement = document.createElement('div');\n                    keyElement.classList.add('key', keyInfo.type);\n                    keyElement.dataset.note = keyInfo.note;\n                    // Display note name without octave on key for simplicity, maybe add octave later if needed\n                    keyElement.textContent = keyInfo.note.slice(0, -1); // Show C, C#, D etc.\n\n                    // Add event listener for playing sound on click/touch\n                    keyElement.addEventListener('mousedown', (e) => {\n                        e.preventDefault(); // Prevent focus issues on mobile\n                        initAudioContext(); // Ensure audio context is started by user gesture\n                        playNote(keyInfo.note);\n                        keyElement.classList.add('pressed'); // Visual feedback\n                    });\n                    keyElement.addEventListener('mouseup', () => {\n                       keyElement.classList.remove('pressed');\n                    });\n                    keyElement.addEventListener('mouseleave', () => { // If mouse slides off while pressed\n                        keyElement.classList.remove('pressed');\n                    });\n                     // Touch events for mobile\n                     keyElement.addEventListener('touchstart', (e) => {\n                        e.preventDefault();\n                        initAudioContext();\n                        playNote(keyInfo.note);\n                        keyElement.classList.add('pressed');\n                    }, { passive: false }); // Need passive false to preventDefault\n                    keyElement.addEventListener('touchend', () => {\n                       keyElement.classList.remove('pressed');\n                    });\n\n\n                    keyboardDiv.appendChild(keyElement);\n                });\n            }\n\n            // --- Update UI ---\n            function updateDisplay() {\n                const root = rootSelect.value;\n                const type = triadSelect.value;\n                const inversion = inversionSelect.value;\n\n                // Update selection text\n                selectionInfo.textContent = `${root} ${type}, ${inversion}`;\n\n                // Calculate notes\n                const rootPositionNotes = getTriadNotes(root, type, 4); // Start at octave 4\n                const { invertedNotes, lowestNoteRole } = applyInversion(rootPositionNotes, inversion);\n                const notesToHighlight = invertedNotes.map(n => n.note);\n\n                 // Update formula text\n                const intervals = calculateTriadIntervals(type);\n                const rootPosNoteNames = rootPositionNotes.map(n => n.name);\n                formulaInfo.textContent = `Root: ${rootPosNoteNames[0]}, Third: ${intervals.thirdName} (${rootPosNoteNames[1]}), Fifth: ${intervals.fifthName} (${rootPosNoteNames[2]})`;\n\n                 // Update notes list text\n                 notesInfo.textContent = notesToHighlight.join(', ');\n\n                 // Update lowest note info\n                 if (inversion !== 'Root Position') {\n                    lowestNoteInfo.textContent = `${lowestNoteRole} (${invertedNotes[0].note})`;\n                    lowestNoteInfoContainer.style.display = 'block';\n                } else {\n                    lowestNoteInfoContainer.style.display = 'none';\n                }\n\n                // Highlight keys\n                highlightKeys(notesToHighlight);\n\n                // Play the chord\n                playChord(notesToHighlight);\n            }\n\n            function highlightKeys(notesToHighlight) {\n                // Clear previous highlights\n                document.querySelectorAll('.key.highlighted').forEach(key => {\n                    key.classList.remove('highlighted');\n                });\n\n                // Add new highlights\n                notesToHighlight.forEach(noteName => {\n                    // Handle enharmonics (e.g., C# and Db) - find either\n                    const sharpEquivalent = noteName.replace('b', '#');\n                    const flatEquivalent = noteName.replace('#', 'b');\n\n                    const keyElement = keyboardDiv.querySelector(`.key[data-note=\"${noteName}\"]`) ||\n                                       keyboardDiv.querySelector(`.key[data-note=\"${sharpEquivalent}\"]`) ||\n                                       keyboardDiv.querySelector(`.key[data-note=\"${flatEquivalent}\"]`);\n\n                    if (keyElement) {\n                        keyElement.classList.add('highlighted');\n                    } else {\n                        console.warn(`Key element not found for note: ${noteName}`);\n                    }\n                });\n            }\n\n            // --- Event Listeners ---\n            rootSelect.addEventListener('change', updateDisplay);\n            triadSelect.addEventListener('change', updateDisplay);\n            inversionSelect.addEventListener('change', updateDisplay);\n\n            // --- Initial Setup ---\n            createKeyboard();\n            updateDisplay(); // Initial display based on default values\n\n        });\n    </script>\n\n</body>\n</html>"
  },
    {
    "title": "How to Tie Your Shoes",
    "url": "https://www.youtube.com/watch?v=q44kByZmKDs",
    "subject": "Arts & Crafts",
    "ageRange": "3-5",
    "grade": "Preschool",
    "spec": "The video demonstrates how to tie a shoelace using the bunny ears method. The key idea is to break down the process into manageable steps that can be practiced. \n\nBuild me an interactive web app that reinforces the steps involved in tying a shoelace.\n\nSPECIFICATIONS:\n1. The app should display a shoelace tying process as a series of interactive steps.\n2. The app should feature two shoelaces that the user can manipulate.\n3. The app should have a button for each step in the process, and the user must press the buttons in the correct sequence. When the user presses the correct button, the shoelaces will move to reflect the action. When the user presses the incorrect button, the app should play an error sound and display a message indicating the error.\n4. The app must guide the user through these steps:\n\t*   Grab one lace in each hand, about halfway up the lace, to form a V.\n\t*   Cross the laces to make an X. One lace will be in front, and the other lace is behind it.\n\t*   Take the lace that is behind and pull it over the front and put it through the hole.\n\t*   Take both ends and pull until the X becomes a V again.\n\t*   Spread the V out.\n\t*   Take one lace at the halfway point and let it hang on your finger.\n\t*   Pinch both sides of the lace so it makes a loop around your finger.\n\t*   Pull your finger out, and you've got an open loop. Hold on to it.\n\t*   Take the other lace and lay it over your thumb and finger so it's in front of the loop.\n\t*   Use your finger to send that lace back to the other side.\n\t*   Now the laces point opposite ways again, and you've made a little hole between your shoe and your thumb.\n\t*   Poke the lace through the little hole just a little bit, so it makes a loose loop.\n\t*   Grab both loops at the same time and pull until the knot is tight.\n\nProvide the code as a single, self-contained HTML document. All styles and scripts must be inline. In the result, encase the code between \"```\" and \"```\" for easy parsing.",
    "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Shoelace Tying</title>\n    <style>\n        body {\n            font-family: sans-serif;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            padding: 20px;\n            background-color: #f0f0f0;\n        }\n\n        h1 {\n            color: #333;\n        }\n\n        #shoe-area {\n            width: 400px;\n            height: 350px;\n            border: 1px solid #ccc;\n            background-color: #fff;\n            margin-bottom: 20px;\n            position: relative; /* For potential absolute positioning inside if needed */\n            overflow: hidden; /* Hide parts of laces going outside */\n        }\n\n        #shoelace-svg {\n            width: 100%;\n            height: 100%;\n        }\n\n        /* Basic lace styling */\n        .lace {\n            fill: none;\n            stroke-width: 8;\n            stroke-linecap: round;\n            stroke-linejoin: round;\n            transition: d 0.5s ease-in-out; /* Animate path changes */\n        }\n\n        #lace-left {\n            stroke: #4a90e2; /* Blue */\n        }\n\n        #lace-right {\n            stroke: #f5a623; /* Orange */\n        }\n\n        /* Represent shoe eyelets */\n        .eyelet {\n            fill: #ddd;\n            stroke: #aaa;\n            stroke-width: 1;\n        }\n\n        #steps-container {\n            display: flex;\n            flex-wrap: wrap;\n            justify-content: center;\n            gap: 10px;\n            margin-bottom: 20px;\n            max-width: 600px;\n        }\n\n        .step-button {\n            padding: 10px 15px;\n            font-size: 14px;\n            cursor: pointer;\n            border: 1px solid #ccc;\n            background-color: #e9e9e9;\n            border-radius: 5px;\n            transition: background-color 0.2s, border-color 0.2s;\n        }\n\n        .step-button:hover:not(:disabled) {\n            background-color: #dcdcdc;\n        }\n\n        .step-button:disabled {\n            cursor: not-allowed;\n            opacity: 0.6;\n        }\n\n        .step-button.completed {\n            background-color: #c8e6c9; /* Light green */\n            border-color: #a5d6a7;\n        }\n\n        .step-button.next-step {\n            background-color: #fff9c4; /* Light yellow */\n            border-color: #fff176;\n            font-weight: bold;\n        }\n\n        #message-area {\n            min-height: 40px;\n            padding: 10px;\n            border: 1px solid transparent;\n            border-radius: 5px;\n            text-align: center;\n            width: 80%;\n            max-width: 580px;\n            background-color: #e3f2fd; /* Light blue info box */\n            color: #1e88e5;\n            font-weight: bold;\n        }\n\n        #message-area.error {\n            background-color: #ffebee; /* Light red */\n            color: #e53935;\n            border-color: #ef9a9a;\n        }\n\n        #reset-button {\n            margin-top: 15px;\n            padding: 8px 20px;\n            font-size: 16px;\n            cursor: pointer;\n            background-color: #80cbc4; /* Teal */\n            color: white;\n            border: none;\n            border-radius: 5px;\n        }\n         #reset-button:hover {\n             background-color: #4db6ac;\n         }\n\n    </style>\n</head>\n<body>\n\n    <h1>Learn to tie your shoelaces!</h1>\n    <p>(Bunny Ears Method)</p>\n\n    <div id=\"shoe-area\">\n        <svg id=\"shoelace-svg\" viewBox=\"0 0 400 350\">\n            <!-- Eyelets -->\n            <circle class=\"eyelet\" cx=\"150\" cy=\"300\" r=\"8\"/>\n            <circle class=\"eyelet\" cx=\"250\" cy=\"300\" r=\"8\"/>\n\n            <!-- Laces -->\n            <path id=\"lace-left\" class=\"lace\" d=\"M 150 300 L 100 150\" />\n            <path id=\"lace-right\" class=\"lace\" d=\"M 250 300 L 300 150\" />\n        </svg>\n    </div>\n\n    <div id=\"message-area\">Press the first button to start!</div>\n\n    <div id=\"steps-container\">\n        <!-- Buttons will be generated by JavaScript -->\n    </div>\n\n    <button id=\"reset-button\">Reset</button>\n\n    <!-- Error sound (Base64 encoded short beep/buzz) -->\n    <audio id=\"error-sound\" preload=\"auto\">\n        <source src=\"data:audio/wav;base64,UklGRl9vT19XQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YU...\" type=\"audio/wav\">\n        <!-- A minimal valid WAV header - provides a silent placeholder if the full data below fails -->\n         <!-- Full Beep Sound (Replace placeholder above if needed, example below is short) -->\n         <!-- Find a short 'error' wav/mp3 online and convert to Base64 using an online tool -->\n         <!-- Example (short ~0.1s beep): -->\n         <source src=\"data:audio/wav;base64,UklGRlIAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhQgAAAAI=\" type=\"audio/wav\">\n         Your browser does not support the audio element.\n    </audio>\n\n\n    <script>\n        const svg = document.getElementById('shoelace-svg');\n        const laceLeft = document.getElementById('lace-left');\n        const laceRight = document.getElementById('lace-right');\n        const stepsContainer = document.getElementById('steps-container');\n        const messageArea = document.getElementById('message-area');\n        const errorSound = document.getElementById('error-sound');\n        const resetButton = document.getElementById('reset-button');\n\n        let currentStepIndex = 0;\n        let buttons = [];\n\n        // --- Define the steps and corresponding SVG path data ---\n        // Note: 'd' attributes define the path shape. M=Move, L=Line, Q=Quadratic Bezier, C=Cubic Bezier\n        // These paths are simplified representations. Perfect realism is complex.\n        const steps = [\n            {\n                id: 'step0-initial', // Internal state, not a button\n                left_d: \"M 150 300 L 100 150\",\n                right_d: \"M 250 300 L 300 150\",\n                instruction: \"Press the first button to start!\" // Instruction for *before* step 1\n            },\n            {\n                id: 'step1-v',\n                buttonText: \"1. Form a V\",\n                left_d: \"M 150 300 Q 150 200 170 150 L 150 50\", // Pull up left\n                right_d: \"M 250 300 Q 250 200 230 150 L 250 50\", // Pull up right\n                instruction: \"Good! Now cross the laces to make an X.\"\n            },\n            {\n                id: 'step2-x',\n                buttonText: \"2. Make an X\",\n                // Left lace goes over right lace visually (drawn later = on top)\n                left_d: \"M 150 300 Q 180 200 250 150 L 280 50\", // Left crosses right\n                right_d: \"M 250 300 Q 220 200 150 150 L 120 50\", // Right crosses under left\n                instruction: \"Take the lace behind (orange) and tuck it through the hole.\"\n            },\n            {\n                id: 'step3-tuck',\n                buttonText: \"3. Tuck Under\",\n                 // Right (orange) lace tucks under and through\n                left_d: \"M 150 300 Q 180 200 250 150 L 280 50\", // Stays crossed over\n                right_d: \"M 250 300 Q 200 220 200 180 Q 200 220 150 150 L 120 50\", // Shows tucking motion path\n                instruction: \"Pull both ends tight to form a knot.\"\n            },\n            {\n                id: 'step4-tighten-knot',\n                buttonText: \"4. Pull Tight (Knot)\",\n                // Pull the 'X' down into a tight knot near eyelets\n                left_d: \"M 150 300 L 200 280 L 100 200\", // Pulled tight, angled out\n                right_d: \"M 250 300 L 200 280 L 300 200\", // Pulled tight, angled out\n                instruction: \"Spread the laces out again.\"\n            },\n             {\n                id: 'step5-spread',\n                buttonText: \"5. Spread V\",\n                 // Similar to step 1 but lower down, starting from knot\n                left_d: \"M 150 300 L 200 280 L 100 150\", // Spread out left\n                right_d: \"M 250 300 L 200 280 L 300 150\", // Spread out right\n                instruction: \"Make a loop ('bunny ear') with one lace (blue).\"\n            },\n            {\n                id: 'step6-loop1-prep', // Steps 6, 7, 8 combined visually\n                buttonText: \"6. Make First Loop\",\n                // Form a loop with the left (blue) lace\n                left_d: \"M 150 300 L 200 280 C 150 250 100 150 150 100 C 200 150 170 250 200 280\", // Blue loop\n                right_d: \"M 250 300 L 200 280 L 300 150\", // Right lace still straight\n                instruction: \"Hold the loop. Now take the other lace (orange).\"\n            },\n             { // Steps 7 & 8 are implicit in holding the loop made in step 6 visual\n                id: 'step9-lace-over',\n                buttonText: \"7. Other Lace Over\",\n                // Right (orange) lace goes over the base of the blue loop\n                left_d: \"M 150 300 L 200 280 C 150 250 100 150 150 100 C 200 150 170 250 200 280\", // Blue loop stays\n                right_d: \"M 250 300 L 200 280 Q 250 250 230 200 L 170 200\", // Orange goes across\n                instruction: \"Send the orange lace back around behind the blue loop.\"\n            },\n             { // Steps 10 & 11 combined visually\n                id: 'step10-send-back',\n                buttonText: \"8. Send Lace Back\",\n                 // Right (orange) lace goes behind, creating the 'hole'\n                left_d: \"M 150 300 L 200 280 C 150 250 100 150 150 100 C 200 150 170 250 200 280\", // Blue loop\n                right_d: \"M 250 300 L 200 280 Q 250 250 280 200 L 280 150\", // Orange pulls back slightly (implying going behind)\n                instruction: \"Poke the orange lace through the hole to make a second loop.\"\n            },\n            { // Step 12\n                id: 'step12-poke-loop2',\n                buttonText: \"9. Make Second Loop\",\n                // Orange lace forms the second loop by poking through\n                left_d: \"M 150 300 L 200 280 C 150 250 100 150 150 100 C 200 150 170 250 200 280\", // Blue loop\n                 // Orange loop forms, goes through hole near center\n                right_d: \"M 250 300 L 200 280 C 250 250 300 150 250 100 C 200 150 230 250 200 280\", // Orange loop\n                instruction: \"Almost there! Grab both loops and pull tight.\"\n            },\n            { // Step 13\n                id: 'step13-pull-tight',\n                buttonText: \"10. Pull Loops Tight\",\n                // Final bow knot, loops pulled tight\n                left_d: \"M 150 300 L 200 280 C 170 260 140 200 170 180 C 200 200 190 260 200 280\", // Tight blue loop\n                right_d: \"M 250 300 L 200 280 C 230 260 260 200 230 180 C 200 200 210 260 200 280\", // Tight orange loop\n                instruction: \"Congratulations! You tied the shoelace!\"\n            }\n        ];\n\n        function initializeApp() {\n            currentStepIndex = 0;\n            stepsContainer.innerHTML = ''; // Clear existing buttons\n            buttons = []; // Clear button array\n\n            // Set initial lace position (state 0)\n            updateLaces(steps[0].left_d, steps[0].right_d);\n            setInstruction(steps[0].instruction);\n            messageArea.classList.remove('error');\n\n\n            // Create buttons for steps 1 onwards\n            steps.slice(1).forEach((step, index) => {\n                const button = document.createElement('button');\n                button.textContent = step.buttonText;\n                button.classList.add('step-button');\n                button.dataset.stepIndex = index + 1; // Store the step index (starting from 1)\n                button.disabled = true; // Disable all buttons initially\n                button.addEventListener('click', handleStepClick);\n                stepsContainer.appendChild(button);\n                buttons.push(button);\n            });\n\n            // Enable the first button\n            if (buttons.length > 0) {\n                buttons[0].disabled = false;\n                buttons[0].classList.add('next-step');\n                 setInstruction(\"Press the first button: \" + buttons[0].textContent); // Update instruction\n            }\n             resetButton.disabled = false;\n        }\n\n        function handleStepClick(event) {\n            const clickedButton = event.target;\n            const clickedStepIndex = parseInt(clickedButton.dataset.stepIndex, 10);\n\n            // Check if the clicked button corresponds to the current expected step\n            if (clickedStepIndex === currentStepIndex + 1) {\n                // Correct step\n                const stepData = steps[clickedStepIndex];\n\n                // Update SVG\n                updateLaces(stepData.left_d, stepData.right_d);\n\n                // Update button states\n                clickedButton.disabled = true;\n                clickedButton.classList.remove('next-step');\n                clickedButton.classList.add('completed');\n\n                // Update message area\n                setInstruction(stepData.instruction);\n                messageArea.classList.remove('error');\n\n                // Move to the next step\n                currentStepIndex++;\n\n                // Enable the next button if it exists\n                if (currentStepIndex < steps.length -1) {\n                    buttons[currentStepIndex].disabled = false;\n                    buttons[currentStepIndex].classList.add('next-step');\n                    // Prepend instruction with next button text\n                    setInstruction(\"Next: \" + buttons[currentStepIndex].textContent + \". \" + steps[currentStepIndex + 1].instruction);\n                } else {\n                    // Last step completed\n                    setInstruction(stepData.instruction); // Show final congratulations\n                    resetButton.focus(); // Maybe focus reset button\n                }\n\n            } else {\n                // Incorrect step\n                playErrorSound();\n                messageArea.textContent = `Oops! That's not the right step. Try pressing the highlighted button.`;\n                messageArea.classList.add('error');\n                // Maybe add a visual cue to the button later (e.g., shake)\n            }\n        }\n\n        function updateLaces(leftD, rightD) {\n            // Ensure laces are drawn in the correct order for overlap (right over left initially, then left over right in X)\n            if (currentStepIndex + 1 >= 2 && currentStepIndex + 1 < 4) { // Steps 2 (X) and 3 (Tuck)\n                 svg.appendChild(laceRight); // Draw right first (under)\n                 svg.appendChild(laceLeft); // Draw left second (over)\n            } else if (currentStepIndex + 1 >= 7 && currentStepIndex + 1 < 9) { // Steps 7 (Orange Over) and 8 (Send Back)\n                 svg.appendChild(laceLeft); // Draw blue loop first (under)\n                 svg.appendChild(laceRight); // Draw orange crossing second (over)\n            }\n             else {\n                 svg.appendChild(laceLeft); // Default: draw left first\n                 svg.appendChild(laceRight); // Draw right second\n            }\n            laceLeft.setAttribute('d', leftD);\n            laceRight.setAttribute('d', rightD);\n        }\n\n\n        function setInstruction(text) {\n            messageArea.textContent = text;\n        }\n\n        function playErrorSound() {\n            try {\n                // Reset playback position and play\n                errorSound.currentTime = 0;\n                errorSound.play();\n            } catch (e) {\n                console.error(\"Error playing sound:\", e);\n                // Fallback or ignore if audio fails\n            }\n        }\n\n        // Reset button functionality\n        resetButton.addEventListener('click', initializeApp);\n\n        // Initial setup when the page loads\n        window.addEventListener('load', initializeApp);\n\n    </script>\n\n</body>\n</html>"
  },
  {
    "title": "How To Draw A Funny Cartoon Taco",
    "url": "https://www.youtube.com/watch?v=pW08I_i3_sk",
    "subject": "Arts & Crafts",
    "ageRange": "6-8",
    "grade": "K-2",
    "spec": "The video provides a step-by-step guide on how to draw a cartoon taco. The key idea is breaking a complex drawing into simple, manageable shapes and steps.\n\nBuild me an interactive web app that guides a user through the steps of drawing a cartoon taco.\n\nSPECIFICATIONS:\n1. The app must display a drawing canvas area.\n2. The app must have 'Next Step' and 'Previous Step' buttons to navigate the drawing tutorial.\n3. At each step, the app should display a faint, grayed-out outline of the shape the user is supposed to draw for that specific step. For example, Step 1 would show an outline of the taco shell.\n4. The user can then use their mouse or finger to trace over this outline. The user's drawing should appear as a solid black line.\n5. When the 'Next Step' button is clicked, the user's drawing from the previous step remains, and the new grayed-out outline for the current step appears. This builds the drawing layer by layer.\n6. The drawing steps should follow the video: 1. Taco Shell (U-shape), 2. Top line of shell, 3. Lettuce (wavy lines), 4. Cheese (small rectangles), 5. Tomatoes (small circles), 6. Eyes (circles), 7. Pupils, 8. Mouth.\n7. A 'Clear Drawing' button must be available to erase the user's drawing and start over from the current step's outline.\n8. An 'Animate Drawing' button should be available at the end. When clicked, it quickly redraws the final taco, line by line, as a fun celebration.\n\nProvide the code as a single, self-contained HTML document. All styles and scripts must be inline. In the result, encase the code between \"```\" and \"```\" for easy parsing.",
    "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>How to Draw a Taco</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            padding: 20px;\n            background-color: #f0f8ff; /* AliceBlue */\n            touch-action: none; /* Prevent default touch actions like page scroll */\n        }\n\n        #canvas-container {\n            position: relative;\n            width: 500px;\n            height: 400px;\n            border: 2px solid #ccc;\n            background-color: #fff;\n            box-shadow: 0 4px 8px rgba(0,0,0,0.1);\n            cursor: crosshair;\n        }\n\n        canvas {\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n        }\n\n        #guide-canvas {\n            z-index: 1;\n            pointer-events: none; /* Allows clicks to go through to drawing canvas */\n        }\n\n        #drawing-canvas {\n            z-index: 2;\n        }\n\n        #controls {\n            margin-top: 20px;\n            display: flex;\n            flex-wrap: wrap;\n            gap: 10px;\n            align-items: center;\n            justify-content: center;\n        }\n\n        button {\n            padding: 10px 20px;\n            font-size: 1em;\n            cursor: pointer;\n            border-radius: 5px;\n            border: 1px solid transparent;\n            color: white;\n            background-color: #4CAF50; /* Green */\n            transition: background-color 0.2s;\n        }\n\n        button:hover:not(:disabled) {\n            background-color: #45a049;\n        }\n        \n        button:disabled {\n            background-color: #cccccc;\n            cursor: not-allowed;\n        }\n\n        #clear-button {\n            background-color: #f44336; /* Red */\n        }\n        #clear-button:hover {\n            background-color: #da190b;\n        }\n         #animate-button {\n            background-color: #2196F3; /* Blue */\n         }\n        #animate-button:hover {\n             background-color: #0b7dda;\n         }\n\n        #step-indicator {\n            margin-top: 15px;\n            font-size: 1.2em;\n            font-weight: bold;\n            color: #333;\n        }\n\n    </style>\n</head>\n<body>\n\n    <h1>Let's Draw a Taco!</h1>\n    <p>Follow the grey lines to draw each part.</p>\n\n    <div id=\"canvas-container\">\n        <canvas id=\"guide-canvas\"></canvas>\n        <canvas id=\"drawing-canvas\"></canvas>\n    </div>\n\n    <div id=\"controls\">\n        <button id=\"prev-button\">Previous Step</button>\n        <button id=\"next-button\">Next Step</button>\n        <button id=\"clear-button\">Clear My Drawing</button>\n        <button id=\"animate-button\" style=\"display:none;\">Animate!</button>\n    </div>\n\n    <div id=\"step-indicator\">Step 1: The Shell</div>\n\n    <script>\n        const guideCanvas = document.getElementById('guide-canvas');\n        const drawingCanvas = document.getElementById('drawing-canvas');\n        const guideCtx = guideCanvas.getContext('2d');\n        const drawCtx = drawingCanvas.getContext('2d');\n        const prevButton = document.getElementById('prev-button');\n        const nextButton = document.getElementById('next-button');\n        const clearButton = document.getElementById('clear-button');\n        const animateButton = document.getElementById('animate-button');\n        const stepIndicator = document.getElementById('step-indicator');\n\n        let isDrawing = false;\n        let lastX = 0;\n        let lastY = 0;\n        let currentStep = 0;\n        // Store user's drawing paths for each step\n        let userPaths = []; \n\n        // --- Define Drawing Steps ---\n        // Each step has a description and a function to draw the guide outline\n        const drawingSteps = [\n            { \n                description: \"Step 1: The Shell\",\n                drawGuide: (ctx) => {\n                    ctx.beginPath();\n                    ctx.arc(250, 200, 100, 0, Math.PI, false);\n                    ctx.stroke();\n                }\n            },\n            { \n                description: \"Step 2: The Top Line\",\n                drawGuide: (ctx) => {\n                    ctx.beginPath();\n                    ctx.moveTo(150, 200);\n                    ctx.lineTo(350, 200);\n                    ctx.stroke();\n                }\n            },\n            { \n                description: \"Step 3: The Lettuce\",\n                drawGuide: (ctx) => {\n                    ctx.beginPath();\n                    ctx.moveTo(160, 200);\n                    ctx.quadraticCurveTo(180, 170, 200, 190);\n                    ctx.quadraticCurveTo(220, 175, 240, 195);\n                    ctx.quadraticCurveTo(260, 170, 280, 190);\n                    ctx.quadraticCurveTo(300, 175, 320, 200);\n                    ctx.stroke();\n                }\n            },\n            { \n                description: \"Step 4: The Cheese\",\n                drawGuide: (ctx) => {\n                    ctx.fillRect(190, 180, 10, 5);\n                    ctx.fillRect(250, 175, 10, 5);\n                    ctx.fillRect(300, 185, 10, 5);\n                }\n            },\n            { \n                description: \"Step 5: The Tomatoes\",\n                drawGuide: (ctx) => {\n                    ctx.beginPath();\n                    ctx.arc(220, 195, 8, 0, Math.PI * 2);\n                    ctx.arc(280, 195, 8, 0, Math.PI * 2);\n                    ctx.fill();\n                }\n            },\n             { \n                description: \"Step 6: The Eyes\",\n                drawGuide: (ctx) => {\n                    ctx.beginPath();\n                    ctx.arc(220, 250, 15, 0, Math.PI * 2);\n                    ctx.arc(280, 250, 15, 0, Math.PI * 2);\n                    ctx.fill();\n                }\n            },\n            { \n                description: \"Step 7: The Pupils\",\n                drawGuide: (ctx) => {\n                    ctx.beginPath();\n                    ctx.arc(225, 250, 7, 0, Math.PI * 2);\n                    ctx.arc(285, 250, 7, 0, Math.PI * 2);\n                    ctx.fill();\n                }\n            },\n             { \n                description: \"Step 8: The Mouth\",\n                drawGuide: (ctx) => {\n                    ctx.beginPath();\n                    ctx.arc(250, 280, 20, 0, Math.PI, false);\n                    ctx.stroke();\n                }\n            }\n        ];\n\n        // Initialize userPaths array\n        for (let i = 0; i < drawingSteps.length; i++) {\n            userPaths.push([]);\n        }\n\n        function setCanvasSize() {\n            const container = document.getElementById('canvas-container');\n            const width = container.offsetWidth;\n            const height = container.offsetHeight;\n            guideCanvas.width = drawingCanvas.width = width;\n            guideCanvas.height = drawingCanvas.height = height;\n            // Redraw everything on resize\n            redrawAll();\n        }\n\n        function getCoords(e) {\n            const rect = drawingCanvas.getBoundingClientRect();\n            const clientX = e.clientX || (e.touches && e.touches[0].clientX);\n            const clientY = e.clientY || (e.touches && e.touches[0].clientY);\n            return {\n                x: clientX - rect.left,\n                y: clientY - rect.top\n            };\n        }\n\n        function startDrawing(e) {\n            e.preventDefault();\n            isDrawing = true;\n            const coords = getCoords(e);\n            lastX = coords.x;\n            lastY = coords.y;\n            // Start a new path for this stroke\n            userPaths[currentStep].push([{x: lastX, y: lastY}]);\n        }\n\n        function draw(e) {\n            if (!isDrawing) return;\n            e.preventDefault();\n            const coords = getCoords(e);\n\n            drawCtx.beginPath();\n            drawCtx.moveTo(lastX, lastY);\n            drawCtx.lineTo(coords.x, coords.y);\n            drawCtx.stroke();\n\n            lastX = coords.x;\n            lastY = coords.y;\n\n            // Add point to the current stroke\n            const currentPath = userPaths[currentStep];\n            currentPath[currentPath.length - 1].push({x: lastX, y: lastY});\n        }\n\n        function stopDrawing(e) {\n            if (isDrawing) {\n                e.preventDefault();\n                isDrawing = false;\n            }\n        }\n\n        function drawGuideForStep(stepIndex) {\n            guideCtx.clearRect(0, 0, guideCanvas.width, guideCanvas.height);\n            if (stepIndex < drawingSteps.length) {\n                guideCtx.strokeStyle = '#cccccc';\n                guideCtx.fillStyle = '#cccccc';\n                guideCtx.lineWidth = 4;\n                drawingSteps[stepIndex].drawGuide(guideCtx);\n            }\n        }\n\n        function redrawUserDrawing() {\n            drawCtx.clearRect(0, 0, drawingCanvas.width, drawingCanvas.height);\n            drawCtx.strokeStyle = '#000000';\n            drawCtx.lineWidth = 3;\n            drawCtx.lineCap = 'round';\n            drawCtx.lineJoin = 'round';\n\n            for (let step = 0; step < currentStep; step++) {\n                if(userPaths[step]) {\n                    userPaths[step].forEach(path => {\n                        if (path.length > 0) {\n                            drawCtx.beginPath();\n                            drawCtx.moveTo(path[0].x, path[0].y);\n                            for (let i = 1; i < path.length; i++) {\n                                drawCtx.lineTo(path[i].x, path[i].y);\n                            }\n                            drawCtx.stroke();\n                        }\n                    });\n                }\n            }\n        }\n\n        function redrawAll() {\n            redrawUserDrawing();\n            drawGuideForStep(currentStep);\n            updateUI();\n        }\n\n        function updateUI() {\n            stepIndicator.textContent = drawingSteps[currentStep] ? drawingSteps[currentStep].description : \"Finished!\";\n            prevButton.disabled = currentStep === 0;\n            nextButton.disabled = currentStep >= drawingSteps.length - 1;\n            animateButton.style.display = currentStep >= drawingSteps.length - 1 ? 'inline-block' : 'none';\n        }\n\n        function animateFinalDrawing() {\n            drawCtx.clearRect(0, 0, drawingCanvas.width, drawingCanvas.height);\n            guideCtx.clearRect(0, 0, guideCanvas.width, guideCanvas.height);\n            let totalDelay = 0;\n\n            for (let step = 0; step < drawingSteps.length; step++) {\n                if(userPaths[step]) {\n                    userPaths[step].forEach(path => {\n                         if (path.length > 1) {\n                            for (let i = 1; i < path.length; i++) {\n                                const p1 = path[i-1];\n                                const p2 = path[i];\n                                setTimeout(() => {\n                                    drawCtx.beginPath();\n                                    drawCtx.moveTo(p1.x, p1.y);\n                                    drawCtx.lineTo(p2.x, p2.y);\n                                    drawCtx.stroke();\n                                }, totalDelay);\n                                totalDelay += 10; // 10ms delay between segments\n                            }\n                        }\n                    });\n                }\n            }\n            // After animation, re-enable buttons\n            setTimeout(redrawAll, totalDelay + 200);\n        }\n\n\n        // --- Event Listeners ---\n        prevButton.addEventListener('click', () => {\n            if (currentStep > 0) {\n                currentStep--;\n                redrawAll();\n            }\n        });\n\n        nextButton.addEventListener('click', () => {\n            if (currentStep < drawingSteps.length - 1) {\n                currentStep++;\n                redrawAll();\n            }\n        });\n\n        clearButton.addEventListener('click', () => {\n            userPaths[currentStep] = []; // Clear only current step's drawing\n            redrawAll(); // Redraw to show the cleared step\n        });\n\n        animateButton.addEventListener('click', () => {\n             // Temporarily disable buttons during animation\n             prevButton.disabled = true;\n             nextButton.disabled = true;\n             animateButton.disabled = true;\n             animateFinalDrawing();\n        });\n\n        // Drawing canvas listeners\n        drawingCanvas.addEventListener('mousedown', startDrawing);\n        drawingCanvas.addEventListener('mousemove', draw);\n        drawingCanvas.addEventListener('mouseup', stopDrawing);\n        drawingCanvas.addEventListener('mouseleave', stopDrawing);\n        drawingCanvas.addEventListener('touchstart', startDrawing, { passive: false });\n        drawingCanvas.addEventListener('touchmove', draw, { passive: false });\n        drawingCanvas.addEventListener('touchend', stopDrawing);\n        drawingCanvas.addEventListener('touchcancel', stopDrawing);\n        \n        window.addEventListener('resize', setCanvasSize);\n\n        // --- Initial Setup ---\n        setCanvasSize();\n        // Initial call to set up the first step\n        redrawAll();\n\n    </script>\n\n</body>\n</html>"
  }
]
